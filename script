#!/bin/bash
#backgroundOnly=false
#arrayStarted=true
#noParity=true
################################################## Quick settings
# list of domains that will be backed up separated by a new line.
vms_to_backup="
vm###1
vm###2
"
# list of specific vdisks to be skipped. use the full path.
vdisks_to_skip="
/mnt/user/domains/vm1/vdisk2.img
/mnt/user/domains/vm1/vdisk3.img
"
# backup location to put vdisks.
backup_location="/path/to/folder"
# W.I.P. 1 is default a.t.m. 0 doesnt shutdown the vm if needed.
enable_backup_running_vm="1"
################################################## Quick settings end

# Version v1.1.5.1 - 2019-09-30
# Added: check before and after backup for .snap.img files and remove them
#	 added parameter --wait to: virsh blockcommit $vm $disknumber (line 2191). This hopefully fixed the renaming of vdisk to vdisk.img.snap.img

# Version v1.1.5 - 2019-02-06  
#### DISCLAIMER ####
# Use at your own risk. This is a work-in-progress and provided as is.
# I have tested this on my own server, as best as I am able, but YMMV.
# -jtok -Dikkekop
### Not working/Bugs ###
# vdisks_to_skip is currently not working
# Live backup is experimental, so please dont test/use on daily use unraid box
# When using enable_backup_running_vm="0" you HAVE TO CHANGE your vdisk path in vm.xml to point to /mnt/cache/somefolder ()
### Changelog as of Version v1.1.4 - 2018/05/19 ###
# - Fixed case sensitive bug, where an .iso file is shown as warning in script-logging when filename is xxx.ISO. Only .iso was accepted
# - Experimental: added live backup, backup of running vm. This also checks if guest agent is installed inside vm to add extra parameter for making sure we have a consistent disk state before taking snapshot and backup. This backup DOES NOT includes RAM state. so when VM is restored it wil be powered off and is in a state as it has been forced powerd off 
# allows the guest to flush its I/O into a stable state before the snapshot is created, which allows use of the snapshot without having to perform a fsck or losing partial database transactions. 
# when guest agent is not installed it just creats a snapshot but is stil considerd to be a safe snapshot
# can be enabled or disabled with: enable_backup_running_vm="1" or "0"
# - Added Quick settings on top of script for easy changes true Unraid webgui
# - Added comments in script to see what is changed
#
# this script copies unRAID vm's vdisks and their configurations to a specified location.
################################################## script variables start ######################################################
# what is the scripts' official name.
official_script_name="script"
# set the name of the script to a variable so it can be used.
me=$(basename "$0")
# default 0 but set the master switch to 1 if you want to enable the script otherwise it will not run.
enabled="1"
# default is 0. set this to 1 if you would like to kill a vm if it cant be shutdown cleanly.
kill_vm_if_cant_shutdown="0"
# default is 1. set this to 0 if you do not want a vm to be started if it was running before the backup started. Paused VMs will be left stopped.
set_vm_to_original_state="1"
# default is 0. set this to the number of days backups should be kept. 0 means indefinitely.
number_of_days_to_keep_backups="0"
# default is 0. set this to the number of backups that should be kept. 0 means infinitely.
# WARNING: If VM has multiple vdisks, then they must end in sequential numbers in order to be correctly backed up (i.e. vdisk1.img, vdisk2.img, etc.).
number_of_backups_to_keep="1"
# default is 0. set this to 1 if you would like to compress backups. This can add a significant amount of time to the backup process. uses tar.gz for sparse file compatibility.
# WARNING: do not turn on if you already have uncompressed backups. You will need to move or delete uncompressed backups before using. this will compress all .xml, .img, and .qcow2 images in the backup directory into ONE tarball.
compress_backups="0"
# default is 1. set this to 0 if you would like to have backups without a timestamp. Timestamps are dropped only when number_of_backups_to_keep is equal to 1.
timestamp_files="1"
#### logging and notifications ####
# default is 1. set to 0 to have log file deleted after the backup has completed.
# NOTE: error logs are separate. settings for error logs can be found in the advanced variables.
keep_log_file="1"
# default is 1. number of successful log files to keep. 0 means infinitely.
number_of_log_files_to_keep="1"
# default is "logs". set to "" to put in root of backups folder. set to "logs/<subfolder>" to keep logs separate if running multiple versions of this script.
log_file_subfolder=""
# default is 1. set to 0 to prevent notification system from being used. Script failures that occur before logging can start, and before this variable is validated will still be sent.
send_notifications="1"
# default is 0. set to 1 to receive more detailed notifications. will not work with send_notifications disabled or only_send_error_notifications enabled.
detailed_notifications="0"
#### advanced variables ####
# default is 0. set to 1 to have reconstruct write (a.k.a. turbo write) enabled during the backup and then disabled after the backup completes.
# NOTE: may break auto functionality when it is implemented. do not use if reconstruct write is already enabled. backups may run faster with this enabled.
enable_reconstruct_write="0"
# default is 0. set this to 1 to compare files after copy and run rsync in the event of failure. could add significant amount of time depending on the size of vms.
compare_files="0"
# default is 1. set to 0 if you would like to skip backing up xml configuration files.
backup_xml="1"
# default is 1. set to 0 if you would like to skip backing up nvram files.
backup_nvram="1"
# default is 1. set to 0 if you would like to skip backing up vdisks. setting this to 0 will automatically disable compression.
backup_vdisks="1"
# default is 0. set to 1 if you would like iso files to be ignored when checking for valid vdisks.
ignore_isos="1"
# default is 0. set this to 1 if you would like to start a vm after it has successfully been backed up. will override set_vm_to_original_state when set to 1.
start_vm_after_backup="0"
# default is 0. set this to 1 if you would like to start a vm after it has failed to have been backed up. will override set_vm_to_original_state when set to 1.
start_vm_after_failure="0"
# default is 0. set this to 1 to disable rsync delta syncs. This option checks last backup with current vdisk before backup and rsync changes between them to
disable_delta_sync="0"
# default is 0. set this to 1 to use rsync instead of cp. 
# NOTE: rsync was significantly slower in my tests.
rsync_only="0"
# default is 1. set this to 0 if you would like to perform a dry-run backup. 
# WARNING: will not work unless rsync_only is set to 1. if this is set to 1 and rsync_only is set to 0, then backups will be partial and the script won't work correctly.
actually_copy_files="1"
# default is 20. set this to the number of times you would like to check if a clean shutdown of a vm has been successful.
clean_shutdown_checks="20"
# default is 30. set this to the number of seconds to wait in between checks to see if a clean shutdown has been successful.
seconds_to_wait="30"
# default is 1. set to 0 to have error log files deleted after the backup has completed.
keep_error_log_file="1"
# default is 10. number of error log files to keep. 0 means infinitely.
number_of_error_log_files_to_keep="10"
# default is 0. set to 1 to only send error notifications.
only_send_error_notifications="0"
################################################## script variables end #########################################################
###################################################### script start #############################################################
# check the name of the script is as it should be. if yes, continue. if no, exit.
if [ "$me" == "$official_script_name" ]; then
	echo "$(date '+%Y-%m-%d %H:%M') information: official_script_name is $official_script_name. script name is valid. continuing."
elif [ ! "$me" == "$official_script_name" ]; then
	echo "$(date '+%Y-%m-%d %H:%M') failure: official_script_name is $official_script_name. script name is invalid. exiting."
	/usr/local/emhttp/plugins/dynamix/scripts/notify -e "unraid-vmbackup_failure" -s "unRAID VM Backup script" -d "script failed" -i "alert" -m "$(date '+%Y-%m-%d %H:%M') failure: official_script_name is $official_script_name. script name is invalid. exiting."
	exit 1
fi
# check to see if the script has been enabled or disabled by the user. if yes, continue if no, exit. if input invalid, exit.
if [[ "$enabled" =~ ^(0|1)$ ]]; then
	if [ "$enabled" -eq 1 ]; then
		echo "$(date '+%Y-%m-%d %H:%M') information: enabled is $enabled. script is enabled. continuing."
	elif [ ! "$enabled" -eq 1 ]; then
		echo "$(date '+%Y-%m-%d %H:%M') failure: enabled is $enabled. script is disabled. exiting."
		/usr/local/emhttp/plugins/dynamix/scripts/notify -e "unraid-vmbackup_failure" -s "unRAID VM Backup script" -d "script failed" -i "alert" -m "$(date '+%Y-%m-%d %H:%M') failure: enabled is $enabled. script is disabled. exiting."
		exit 1
	fi
else
	echo "$(date '+%Y-%m-%d %H:%M') failure: enabled is $enabled. this is not a valid format. expecting [0 = no] or [1 = yes]. exiting."
	/usr/local/emhttp/plugins/dynamix/scripts/notify -e "unraid-vmbackup_failure" -s "unRAID VM Backup script" -d "script failed" -i "alert" -m "$(date '+%Y-%m-%d %H:%M') failure: enabled is $enabled. this is not a valid format. expecting [0 = no] or [1 = yes]. exiting."
	exit 1
fi
# remove the trailing slash from backup_location if it exists.
backup_location=${backup_location%/}
# check to see if the backup_location specified by the user exists. if yes, continue if no, exit. if exists check if writable, if yes continue, if not exit. if input invalid, exit.
if [ -d "$backup_location" ]; then
	echo "$(date '+%Y-%m-%d %H:%M') information: backup_location is $backup_location. this location exists. continuing."
	# if backup_location does exist check to see if the backup_location is writable.
	if [ -w "$backup_location" ]; then
		echo "$(date '+%Y-%m-%d %H:%M') information: backup_location is $backup_location. this location is writable. continuing."
	else
		echo "$(date '+%Y-%m-%d %H:%M') failure: backup_location is $backup_location. this location is not writable. exiting."
		/usr/local/emhttp/plugins/dynamix/scripts/notify -e "unraid-vmbackup_failure" -s "unRAID VM Backup script" -d "script failed" -i "alert" -m "$(date '+%Y-%m-%d %H:%M') failure: backup_location is $backup_location. this location is not writable. exiting."
		exit 1
	fi
else
	echo "$(date '+%Y-%m-%d %H:%M') failure: backup_location is $backup_location. this location does not exist. exiting."
	/usr/local/emhttp/plugins/dynamix/scripts/notify -e "unraid-vmbackup_failure" -s "unRAID VM Backup script" -d "script failed" -i "alert" -m "$(date '+%Y-%m-%d %H:%M') failure: backup_location is $backup_location. this location does not exist. exiting."
	exit 1
fi
# create timestamp variable for rolling backups.
timestamp="$(date '+%Y%m%d_%H%M')""_"
# check to see if backups should have timestamp. if yes, continue. if no, continue. if input invalid, exit.
if [[ "$timestamp_files" =~ ^(0|1)$ ]]; then
	if [ "$timestamp_files" -eq 0 ]; then
		echo "$(date '+%Y-%m-%d %H:%M') information: timestamp_files is $timestamp_files. this variable is only used when number_of_backups_to_keep is set to 1. timestamp will not be added to backup files."
	elif  [ "$timestamp_files" -eq 1 ]; then
		echo "$(date '+%Y-%m-%d %H:%M') information: timestamp_files is $timestamp_files. timestamp will be added to backup files."
	fi
else
	echo "$(date '+%Y-%m-%d %H:%M') failure: timestamp_files is $timestamp_files. this is not a valid format. expecting [0 = no] or [1 = yes]. exiting."
	/usr/local/emhttp/plugins/dynamix/scripts/notify -e "unraid-vmbackup_failure" -s "unRAID VM Backup script" -d "script failed" -i "alert" -m "$(date '+%Y-%m-%d %H:%M') failure: timestamp_files is $timestamp_files. this is not a valid format. expecting [0 = no] or [1 = yes]. exiting."
	exit 1
fi
# check log folder for trailing slash. add if missing.
length=${#log_file_subfolder}
last_char=${log_file_subfolder:$length-1:1}
[[ $last_char != "/" ]] && log_file_subfolder="$log_file_subfolder/"; :
# create the log file subfolder for storing log files.
if [ ! -d "$backup_location/$log_file_subfolder" ] ; then
	echo "$(date '+%Y-%m-%d %H:%M') action: $backup_location/$log_file_subfolder does not exist. creating it."
	# make the directory as it doesn't exist. added -v option to give a confirmation message to command line.
	mkdir -vp "$backup_location/$log_file_subfolder"
else
	echo "$(date '+%Y-%m-%d %H:%M') information: $backup_location/$log_file_subfolder exists. continuing."
fi
# check to see if the log_file_subfolder specified by the user exists. if yes, continue if no, exit. if exists check if writable, if yes continue, if not exit. if input invalid, exit.
if [ -d "$backup_location/$log_file_subfolder" ]; then
	echo "$(date '+%Y-%m-%d %H:%M') information: log_file_subfolder is $backup_location/$log_file_subfolder. this location exists. continuing."
	# if log_file_subfolder does exist check to see if the log_file_subfolder is writable.
	if [ -w "$backup_location/$log_file_subfolder" ]; then
		echo "$(date '+%Y-%m-%d %H:%M') information: log_file_subfolder is $backup_location/$log_file_subfolder. this location is writable. continuing."
	else
		echo "$(date '+%Y-%m-%d %H:%M') failure: log_file_subfolder is $backup_location/$log_file_subfolder. this location is not writable. exiting."
		/usr/local/emhttp/plugins/dynamix/scripts/notify -e "unraid-vmbackup_failure" -s "unRAID VM Backup script" -d "script failed" -i "alert" -m "$(date '+%Y-%m-%d %H:%M') failure: log_file_subfolder is $backup_location/$log_file_subfolder. this location is not writable. exiting."
		exit 1
	fi
else
	echo "$(date '+%Y-%m-%d %H:%M') failure: log_file_subfolder is $backup_location/$log_file_subfolder. this location does not exist. exiting."
	/usr/local/emhttp/plugins/dynamix/scripts/notify -e "unraid-vmbackup_failure" -s "unRAID VM Backup script" -d "script failed" -i "alert" -m "$(date '+%Y-%m-%d %H:%M') failure: log_file_subfolder is $backup_location/$log_file_subfolder. this location does not exist. exiting."
	exit 1
fi
# initialize error variable. assume no errors.
errors="0"
### Logging Started ###
echo "$(date '+%Y-%m-%d %H:%M')" " Start logging to log file."  | tee -a "$backup_location/$log_file_subfolder$timestamp""unraid-vmbackup.log"
#### logging and notifications ####
# check to see if notifications should be sent. if yes, continue. if no, continue. if input invalid, exit.
if [[ "$send_notifications" =~ ^(0|1)$ ]]; then
	if [ "$send_notifications" -eq 0 ]; then
		echo "$(date '+%Y-%m-%d %H:%M') information: send_notifications is $send_notifications. notifications will not be sent."
	elif  [ "$send_notifications" -eq 1 ]; then
		echo "$(date '+%Y-%m-%d %H:%M') information: send_notifications is $send_notifications. notifications will be sent."
	fi
else
	echo "$(date '+%Y-%m-%d %H:%M') failure: send_notifications is $send_notifications. this is not a valid format. expecting [0 = no] or [1 = yes]. exiting." | tee -a "$backup_location/$log_file_subfolder$timestamp""unraid-vmbackup.log" && errors="1"
	/usr/local/emhttp/plugins/dynamix/scripts/notify -e "unraid-vmbackup_failure" -s "unRAID VM Backup script" -d "script failed" -i "alert" -m "$(date '+%Y-%m-%d %H:%M') failure: send_notifications is $send_notifications. this is not a valid format. expecting [0 = no] or [1 = yes]. exiting."
	exit 1
fi
# check to see if only error notifications should be sent. if yes, continue. if no, continue. if input invalid, exit.
if [[ "$only_send_error_notifications" =~ ^(0|1)$ ]]; then
	if [ "$only_send_error_notifications" -eq 0 ]; then
		echo "$(date '+%Y-%m-%d %H:%M') information: only_send_error_notifications is $only_send_error_notifications. normal notifications will be sent if send_notifications is enabled."
	elif  [ "$only_send_error_notifications" -eq 1 ]; then
		echo "$(date '+%Y-%m-%d %H:%M') information: only_send_error_notifications is $only_send_error_notifications. only error notifications will be sent if send_notifications is enabled."
	fi
else
	echo "$(date '+%Y-%m-%d %H:%M') failure: only_send_error_notifications is $only_send_error_notifications. this is not a valid format. expecting [0 = no] or [1 = yes]. exiting." | tee -a "$backup_location/$log_file_subfolder$timestamp""unraid-vmbackup.log" && errors="1"
	/usr/local/emhttp/plugins/dynamix/scripts/notify -e "unraid-vmbackup_failure" -s "unRAID VM Backup script" -d "script failed" -i "alert" -m "$(date '+%Y-%m-%d %H:%M') failure: only_send_error_notifications is $only_send_error_notifications. this is not a valid format. expecting [0 = no] or [1 = yes]. exiting."
	exit 1
fi
# notify user that script has started.
if [ "$send_notifications" -eq 1 ] && [ "$only_send_error_notifications" -eq 0 ]; then
	/usr/local/emhttp/plugins/dynamix/scripts/notify -e "unraid-vmbackup_start" -s "unRAID VM Backup script" -d "script starting" -i "normal" -m "$(date '+%Y-%m-%d %H:%M') information: unRAID VM Backup script is starting. Look for finished message."
fi
# check to see if log files should be kept. if yes, continue. if no, continue. if input invalid, exit.
if [[ "$keep_log_file" =~ ^(0|1)$ ]]; then
	if [ "$keep_log_file" -eq 0 ]; then
		echo "$(date '+%Y-%m-%d %H:%M') information: keep_log_file is $keep_log_file. log files will not be kept." | tee -a "$backup_location/$log_file_subfolder$timestamp""unraid-vmbackup.log"
	elif  [ "$keep_log_file" -eq 1 ]; then
		echo "$(date '+%Y-%m-%d %H:%M') information: keep_log_file is $keep_log_file. log files will be kept." | tee -a "$backup_location/$log_file_subfolder$timestamp""unraid-vmbackup.log"
	fi
else
	echo "$(date '+%Y-%m-%d %H:%M') failure: keep_log_file is $keep_log_file. this is not a valid format. expecting [0 = no] or [1 = yes]. exiting." | tee -a "$backup_location/$log_file_subfolder$timestamp""unraid-vmbackup.log" && errors="1"
	if [ "$send_notifications" -eq 1 ]; then
		/usr/local/emhttp/plugins/dynamix/scripts/notify -e "unraid-vmbackup_failure" -s "unRAID VM Backup script" -d "script failed" -i "alert" -m "$(date '+%Y-%m-%d %H:%M') failure: keep_log_file is $keep_log_file. this is not a valid format. expecting [0 = no] or [1 = yes]. exiting."
	fi
	exit 1
fi
# check to see how many log files should be kept. if yes, continue if no, continue if input invalid, exit.
if [[ "$number_of_log_files_to_keep" =~ ^[0-9]+$ ]]; then
	if [ "$number_of_log_files_to_keep" -eq 0 ]; then
		echo "$(date '+%Y-%m-%d %H:%M') information: number_of_log_files_to_keep is $number_of_log_files_to_keep. an infinite number of log files will be kept. be sure to pay attention to how many log files there are." | tee -a "$backup_location/$log_file_subfolder$timestamp""unraid-vmbackup.log"
	elif [ "$number_of_log_files_to_keep" -gt 40 ]; then
		echo "$(date '+%Y-%m-%d %H:%M') information: number_of_log_files_to_keep is $number_of_log_files_to_keep. this is a lot of log files to keep." | tee -a "$backup_location/$log_file_subfolder$timestamp""unraid-vmbackup.log"
	elif [ "$number_of_log_files_to_keep" -ge 1 ] && [ "$number_of_log_files_to_keep" -le 40 ]; then
		echo "$(date '+%Y-%m-%d %H:%M') information: number_of_log_files_to_keep is $number_of_log_files_to_keep. this is probably a sufficient number of log files to keep." | tee -a "$backup_location/$log_file_subfolder$timestamp""unraid-vmbackup.log"
	fi
else
	echo "$(date '+%Y-%m-%d %H:%M') failure: number_of_log_files_to_keep is $number_of_log_files_to_keep. this is not a valid format. expecting a number between [0 - 1000000]. exiting." | tee -a "$backup_location/$log_file_subfolder$timestamp""unraid-vmbackup.log" && errors="1"
	if [ "$send_notifications" -eq 1 ]; then
		/usr/local/emhttp/plugins/dynamix/scripts/notify -e "unraid-vmbackup_failure" -s "unRAID VM Backup script" -d "script failed" -i "alert" -m "$(date '+%Y-%m-%d %H:%M') failure: number_of_log_files_to_keep is $number_of_log_files_to_keep. this is not a valid format. expecting a number between [0 - 1000000]. exiting."
	fi
	
	exit 1
fi
# check to see if vm should be killed if clean shutdown fails. if yes, continue. if no, continue. if input invalid, exit.
if [[ "$kill_vm_if_cant_shutdown" =~ ^(0|1)$ ]]; then
	if [ "$kill_vm_if_cant_shutdown" -eq 0 ]; then
		echo "$(date '+%Y-%m-%d %H:%M') information: kill_vm_if_cant_shutdown is $kill_vm_if_cant_shutdown. vms will not be forced to shutdown if a clean shutdown can not be detected." | tee -a "$backup_location/$log_file_subfolder$timestamp""unraid-vmbackup.log"
	elif [ "$kill_vm_if_cant_shutdown" -eq 1 ]; then
		echo "$(date '+%Y-%m-%d %H:%M') information: kill_vm_if_cant_shutdown is $kill_vm_if_cant_shutdown. vms will be forced to shutdown if a clean shutdown can not be detected." | tee -a "$backup_location/$log_file_subfolder$timestamp""unraid-vmbackup.log"
	fi
else
	echo "$(date '+%Y-%m-%d %H:%M') failure: kill_vm_if_cant_shutdown is $kill_vm_if_cant_shutdown. this is not a valid format. expecting [0 = no] or [1 = yes]. exiting." | tee -a "$backup_location/$log_file_subfolder$timestamp""unraid-vmbackup.log" && errors="1"
	if [ "$send_notifications" -eq 1 ];then
		/usr/local/emhttp/plugins/dynamix/scripts/notify -e "unraid-vmbackup_failure" -s "unRAID VM Backup script" -d "script failed" -i "alert" -m "$(date '+%Y-%m-%d %H:%M') failure: kill_vm_if_cant_shutdown is $kill_vm_if_cant_shutdown. this is not a valid format. expecting [0 = no] or [1 = yes]. exiting."
	fi
	exit 1
fi
# check to see if vm should be set to original state after backup. if yes, continue. if no, continue. if input invalid, exit.
if [[ "$set_vm_to_original_state" =~ ^(0|1)$ ]]; then
	if [ "$set_vm_to_original_state" -eq 0 ]; then
		echo "$(date '+%Y-%m-%d %H:%M') information: set_vm_to_original_state is $set_vm_to_original_state. vms will not be set to their original state after backup." | tee -a "$backup_location/$log_file_subfolder$timestamp""unraid-vmbackup.log"
	elif [ "$set_vm_to_original_state" -eq 1 ]; then
		echo "$(date '+%Y-%m-%d %H:%M') information: set_vm_to_original_state is $set_vm_to_original_state. vms will be set to their original state after backup." | tee -a "$backup_location/$log_file_subfolder$timestamp""unraid-vmbackup.log"
	fi
else
	echo "$(date '+%Y-%m-%d %H:%M') failure: set_vm_to_original_state is $set_vm_to_original_state. this is not a valid format. expecting [0 = no] or [1 = yes]. exiting." | tee -a "$backup_location/$log_file_subfolder$timestamp""unraid-vmbackup.log" && errors="1"
	if [ "$send_notifications" -eq 1 ];then
		/usr/local/emhttp/plugins/dynamix/scripts/notify -e "unraid-vmbackup_failure" -s "unRAID VM Backup script" -d "script failed" -i "alert" -m "$(date '+%Y-%m-%d %H:%M') failure: set_vm_to_original_state is $set_vm_to_original_state. this is not a valid format. expecting [0 = no] or [1 = yes]. exiting."
	fi
	exit 1
fi
# check to how many days backups should be kept. if yes, continue. if no, continue. if input invalid, exit.
if [[ "$number_of_days_to_keep_backups" =~ ^[0-9]+$ ]]; then
	if [ "$number_of_days_to_keep_backups" -lt 7 ]; then
		if [ "$number_of_days_to_keep_backups" -eq 0 ]; then
			echo "$(date '+%Y-%m-%d %H:%M') information: number_of_days_to_keep_backups is $number_of_days_to_keep_backups. backups will be kept indefinitely. be sure to set number_of_backups_to_keep to keep backups storage usage down." | tee -a "$backup_location/$log_file_subfolder$timestamp""unraid-vmbackup.log"
		else
			echo "$(date '+%Y-%m-%d %H:%M') warning: number_of_days_to_keep_backups is $number_of_days_to_keep_backups. this is potentially an insufficient number of days to keep your backups." | tee -a "$backup_location/$log_file_subfolder$timestamp""unraid-vmbackup.log"
		fi
	elif [ "$number_of_days_to_keep_backups" -gt 180 ]; then
		echo "$(date '+%Y-%m-%d %H:%M') warning: number_of_days_to_keep_backups is $number_of_days_to_keep_backups. this is a long time to keep your backups." | tee -a "$backup_location/$log_file_subfolder$timestamp""unraid-vmbackup.log"
	elif [ "$number_of_days_to_keep_backups" -ge 5 ] && [ "$number_of_days_to_keep_backups" -le 180 ]; then
		echo "$(date '+%Y-%m-%d %H:%M') information: number_of_days_to_keep_backups is $number_of_days_to_keep_backups. this is probably a sufficient number of days to keep your backups." | tee -a "$backup_location/$log_file_subfolder$timestamp""unraid-vmbackup.log"
	fi
else
	echo "$(date '+%Y-%m-%d %H:%M') failure: number_of_days_to_keep_backups is $number_of_days_to_keep_backups. this is not a valid format. expecting a number between [0 - 1000000]. exiting." | tee -a "$backup_location/$log_file_subfolder$timestamp""unraid-vmbackup.log" && errors="1"
	if [ "$send_notifications" -eq 1 ];then
	
		/usr/local/emhttp/plugins/dynamix/scripts/notify -e "unraid-vmbackup_failure" -s "unRAID VM Backup script" -d "script failed" -i "alert" -m "$(date '+%Y-%m-%d %H:%M') failure: number_of_days_to_keep_backups is $number_of_days_to_keep_backups. this is not a valid format. expecting a number between [0 - 1000000]. exiting."
	fi
	exit 1
fi
# check to how many backups should be kept. if yes, continue. if no, continue. if input invalid, exit.
if [[ "$number_of_backups_to_keep" =~ ^[0-9]+$ ]]; then
	if [ "$number_of_backups_to_keep" -lt 2 ]; then
		if [ "$number_of_backups_to_keep" -eq 0 ]; then
			echo "$(date '+%Y-%m-%d %H:%M') information: number_of_backups_to_keep is $number_of_backups_to_keep. an infinite number of backups will be kept. be sure to set number_of_days_to_keep_backups to keep backups storage usage down." | tee -a "$backup_location/$log_file_subfolder$timestamp""unraid-vmbackup.log"
		else
			echo "$(date '+%Y-%m-%d %H:%M') warning: number_of_backups_to_keep is $number_of_backups_to_keep. this is potentially an insufficient number of backups to keep." | tee -a "$backup_location/$log_file_subfolder$timestamp""unraid-vmbackup.log"
		fi
	elif [ "$number_of_backups_to_keep" -gt 40 ]; then
		echo "$(date '+%Y-%m-%d %H:%M') warning: number_of_backups_to_keep is $number_of_backups_to_keep. this is a lot of backups to keep." | tee -a "$backup_location/$log_file_subfolder$timestamp""unraid-vmbackup.log"
	elif [ "$number_of_backups_to_keep" -ge 2 ] && [ "$number_of_backups_to_keep" -le 40 ]; then
		echo "$(date '+%Y-%m-%d %H:%M') information: number_of_backups_to_keep is $number_of_backups_to_keep. this is probably a sufficient number of backups to keep." | tee -a "$backup_location/$log_file_subfolder$timestamp""unraid-vmbackup.log"
	fi
else
	echo "$(date '+%Y-%m-%d %H:%M') failure: number_of_backups_to_keep is $number_of_backups_to_keep. this is not a valid format. expecting a number between [0 - 1000000]. exiting." | tee -a "$backup_location/$log_file_subfolder$timestamp""unraid-vmbackup.log" && errors="1"
	if [ "$send_notifications" -eq 1 ];then
		/usr/local/emhttp/plugins/dynamix/scripts/notify -e "unraid-vmbackup_failure" -s "unRAID VM Backup script" -d "script failed" -i "alert" -m "$(date '+%Y-%m-%d %H:%M') failure: number_of_backups_to_keep is $number_of_backups_to_keep. this is not a valid format. expecting a number between [0 - 1000000]. exiting."
	fi
	exit 1
fi
# check to see if backups should be compressed. if yes, continue. if no, continue. if input invalid, exit.
if [[ "$compress_backups" =~ ^(0|1)$ ]]; then
	if [ "$compress_backups" -eq 0 ]; then
		echo "$(date '+%Y-%m-%d %H:%M') information: compress_backups is $compress_backups. backups will not be compressed." | tee -a "$backup_location/$log_file_subfolder$timestamp""unraid-vmbackup.log"
	elif [ "$compress_backups" -eq 1 ]; then
		echo "$(date '+%Y-%m-%d %H:%M') information: compress_backups is $compress_backups. backups will be compressed." | tee -a "$backup_location/$log_file_subfolder$timestamp""unraid-vmbackup.log"
	fi
else
	echo "$(date '+%Y-%m-%d %H:%M') failure: compress_backups is $compress_backups. this is not a valid format. expecting [0 = no] or [1 = yes]. exiting." | tee -a "$backup_location/$log_file_subfolder$timestamp""unraid-vmbackup.log" && errors="1"
	if [ "$send_notifications" -eq 1 ];then
		/usr/local/emhttp/plugins/dynamix/scripts/notify -e "unraid-vmbackup_failure" -s "unRAID VM Backup script" -d "script failed" -i "alert" -m "$(date '+%Y-%m-%d %H:%M') failure: compress_backups is $compress_backups. this is not a valid format. expecting [0 = no] or [1 = yes]. exiting."
	fi
	exit 1
fi
#### advanced variables ####
# check to see if reconstruct write should be enabled during backup. if yes, continue. if no, continue. if input invalid, exit.
if [[ "$enable_reconstruct_write" =~ ^(0|1)$ ]]; then
	if [ "$enable_reconstruct_write" -eq 0 ]; then
		echo "$(date '+%Y-%m-%d %H:%M') information: enable_reconstruct_write is $enable_reconstruct_write. reconstruct write will not be enabled by this script." | tee -a "$backup_location/$log_file_subfolder$timestamp""unraid-vmbackup.log"
	elif [ "$enable_reconstruct_write" -eq 1 ]; then
		echo "$(date '+%Y-%m-%d %H:%M') information: enable_reconstruct_write is $enable_reconstruct_write. reconstruct write will be enabled during the backup." | tee -a "$backup_location/$log_file_subfolder$timestamp""unraid-vmbackup.log"
	fi
else
	echo "$(date '+%Y-%m-%d %H:%M') failure: enable_reconstruct_write is $enable_reconstruct_write. this is not a valid format. expecting [0 = no] or [1 = yes]. exiting." | tee -a "$backup_location/$log_file_subfolder$timestamp""unraid-vmbackup.log" && errors="1"
	if [ "$send_notifications" -eq 1 ];then
		/usr/local/emhttp/plugins/dynamix/scripts/notify -e "unraid-vmbackup_failure" -s "unRAID VM Backup script" -d "script failed" -i "alert" -m "$(date '+%Y-%m-%d %H:%M') failure: enable_reconstruct_write is $enable_reconstruct_write. this is not a valid format. expecting [0 = no] or [1 = yes]. exiting."
	fi
	exit 1
fi
# check to see if files should be compared after backup. if yes, continue. if no, continue. if input invalid, exit.
if [[ "$compare_files" =~ ^(0|1)$ ]]; then
	if [ "$compare_files" -eq 0 ]; then
		echo "$(date '+%Y-%m-%d %H:%M') information: compare_files is $compare_files. files will not be compared after backups." | tee -a "$backup_location/$log_file_subfolder$timestamp""unraid-vmbackup.log"
	elif [ "$compare_files" -eq 1 ]; then
		echo "$(date '+%Y-%m-%d %H:%M') information: compare_files is $compare_files. files will be compared after backups." | tee -a "$backup_location/$log_file_subfolder$timestamp""unraid-vmbackup.log"
	fi
else
	echo "$(date '+%Y-%m-%d %H:%M') failure: compare_files is $compare_files. this is not a valid format. expecting [0 = no] or [1 = yes]. exiting." | tee -a "$backup_location/$log_file_subfolder$timestamp""unraid-vmbackup.log" && errors="1"
	if [ "$send_notifications" -eq 1 ];then
		/usr/local/emhttp/plugins/dynamix/scripts/notify -e "unraid-vmbackup_failure" -s "unRAID VM Backup script" -d "script failed" -i "alert" -m "$(date '+%Y-%m-%d %H:%M') failure: compare_files is $compare_files. this is not a valid format. expecting [0 = no] or [1 = yes]. exiting."
	fi
	exit 1
fi
# check to see if xml should be backed up. if yes, continue. if no, continue. if input invalid, exit.
if [[ "$backup_xml" =~ ^(0|1)$ ]]; then
	if [ "$backup_xml" -eq 0 ]; then
		echo "$(date '+%Y-%m-%d %H:%M') warning: backup_xml is $backup_xml. vms will not have their xml configurations backed up." | tee -a "$backup_location/$log_file_subfolder$timestamp""unraid-vmbackup.log"
	elif [ "$backup_xml" -eq 1 ]; then
		echo "$(date '+%Y-%m-%d %H:%M') information: backup_xml is $backup_xml. vms will have their xml configurations backed up." | tee -a "$backup_location/$log_file_subfolder$timestamp""unraid-vmbackup.log"
	fi
else
	echo "$(date '+%Y-%m-%d %H:%M') failure: backup_xml is $backup_xml. this is not a valid format. expecting [0 = no] or [1 = yes]. exiting." | tee -a "$backup_location/$log_file_subfolder$timestamp""unraid-vmbackup.log" && errors="1"
	if [ "$send_notifications" -eq 1 ];then
		/usr/local/emhttp/plugins/dynamix/scripts/notify -e "unraid-vmbackup_failure" -s "unRAID VM Backup script" -d "script failed" -i "alert" -m "$(date '+%Y-%m-%d %H:%M') failure: backup_xml is $backup_xml. this is not a valid format. expecting [0 = no] or [1 = yes]. exiting."
	fi
	exit 1
fi
# check to see if xml should be backed up. if yes, continue. if no, continue. if input invalid, exit.
if [[ "$backup_nvram" =~ ^(0|1)$ ]]; then
	if [ "$backup_nvram" -eq 0 ]; then
		echo "$(date '+%Y-%m-%d %H:%M') warning: backup_nvram is $backup_nvram. vms will not have their nvram backed up." | tee -a "$backup_location/$log_file_subfolder$timestamp""unraid-vmbackup.log"
	elif [ "$backup_nvram" -eq 1 ]; then
		echo "$(date '+%Y-%m-%d %H:%M') information: backup_nvram is $backup_nvram. vms will have their nvram backed up." | tee -a "$backup_location/$log_file_subfolder$timestamp""unraid-vmbackup.log"
	fi
else
	echo "$(date '+%Y-%m-%d %H:%M') failure: backup_nvram is $backup_nvram. this is not a valid format. expecting [0 = no] or [1 = yes]. exiting." | tee -a "$backup_location/$log_file_subfolder$timestamp""unraid-vmbackup.log" && errors="1"
	if [ "$send_notifications" -eq 1 ];then
		/usr/local/emhttp/plugins/dynamix/scripts/notify -e "unraid-vmbackup_failure" -s "unRAID VM Backup script" -d "script failed" -i "alert" -m "$(date '+%Y-%m-%d %H:%M') failure: backup_nvram is $backup_nvram. this is not a valid format. expecting [0 = no] or [1 = yes]. exiting."
	fi
	exit 1
fi
# check to see if vdisks should be backed up. if yes, continue. if no, continue. if input invalid, exit.
if [[ "$backup_vdisks" =~ ^(0|1)$ ]]; then
	if [ "$backup_vdisks" -eq 0 ]; then
		echo "$(date '+%Y-%m-%d %H:%M') warning: backup_vdisks is $backup_vdisks. vms will not have their vdisks backed up. compression will be set to off." | tee -a "$backup_location/$log_file_subfolder$timestamp""unraid-vmbackup.log"
		compress_backups="0"
	elif [ "$backup_vdisks" -eq 1 ]; then
		echo "$(date '+%Y-%m-%d %H:%M') information: backup_vdisks is $backup_vdisks. vms will have their vdisks backed up." | tee -a "$backup_location/$log_file_subfolder$timestamp""unraid-vmbackup.log"
	fi
else
	echo "$(date '+%Y-%m-%d %H:%M') failure: backup_vdisks is $backup_vdisks. this is not a valid format. expecting [0 = no] or [1 = yes]. exiting." | tee -a "$backup_location/$log_file_subfolder$timestamp""unraid-vmbackup.log" && errors="1"
	if [ "$send_notifications" -eq 1 ];then
		/usr/local/emhttp/plugins/dynamix/scripts/notify -e "unraid-vmbackup_failure" -s "unRAID VM Backup script" -d "script failed" -i "alert" -m "$(date '+%Y-%m-%d %H:%M') failure: backup_vdisks is $backup_vdisks. this is not a valid format. expecting [0 = no] or [1 = yes]. exiting."
	fi
	exit 1
fi
# check to see if iso files should be ignored when checking vdisks. if yes, continue. if no, continue. if input invalid, exit.
if [[ "$ignore_isos" =~ ^(0|1)$ ]]; then
	if [ "$ignore_isos" -eq 0 ]; then
		echo "$(date '+%Y-%m-%d %H:%M') information: ignore_isos is $ignore_isos. iso files will not be ignored when checking vdisks." | tee -a "$backup_location/$log_file_subfolder$timestamp""unraid-vmbackup.log"
	elif [ "$ignore_isos" -eq 1 ]; then
		echo "$(date '+%Y-%m-%d %H:%M') information: ignore_isos is $ignore_isos. iso files will be ignored when checking vdisks." | tee -a "$backup_location/$log_file_subfolder$timestamp""unraid-vmbackup.log"
	fi
else
	echo "$(date '+%Y-%m-%d %H:%M') failure: ignore_isos is $ignore_isos. this is not a valid format. expecting [0 = no] or [1 = yes]. exiting." | tee -a "$backup_location/$log_file_subfolder$timestamp""unraid-vmbackup.log" && errors="1"
	if [ "$send_notifications" -eq 1 ];then
		/usr/local/emhttp/plugins/dynamix/scripts/notify -e "unraid-vmbackup_failure" -s "unRAID VM Backup script" -d "script failed" -i "alert" -m "$(date '+%Y-%m-%d %H:%M') failure: ignore_isos is $ignore_isos. this is not a valid format. expecting [0 = no] or [1 = yes]. exiting."
	fi
	exit 1
fi
# check to see if vms should be started after a successful backup. if yes, continue. if no, continue. if input invalid, exit.
if [[ "$start_vm_after_backup" =~ ^(0|1)$ ]]; then
	if [ "$start_vm_after_backup" -eq 0 ]; then
		echo "$(date '+%Y-%m-%d %H:%M') information: start_vm_after_backup is $start_vm_after_backup. vms will not be started following successful backup." | tee -a "$backup_location/$log_file_subfolder$timestamp""unraid-vmbackup.log"
	elif [ "$start_vm_after_backup" -eq 1 ]; then
		echo "$(date '+%Y-%m-%d %H:%M') information: start_vm_after_backup is $start_vm_after_backup vms will be started following a successful backup." | tee -a "$backup_location/$log_file_subfolder$timestamp""unraid-vmbackup.log"
	fi
else
	echo "$(date '+%Y-%m-%d %H:%M') failure: start_vm_after_backup is $start_vm_after_backup. this is not a valid format. expecting [0 = no] or [1 = yes]. exiting." | tee -a "$backup_location/$log_file_subfolder$timestamp""unraid-vmbackup.log" && errors="1"
	if [ "$send_notifications" -eq 1 ];then
		/usr/local/emhttp/plugins/dynamix/scripts/notify -e "unraid-vmbackup_failure" -s "unRAID VM Backup script" -d "script failed" -i "alert" -m "$(date '+%Y-%m-%d %H:%M') failure: start_vm_after_backup is $start_vm_after_backup. this is not a valid format. expecting [0 = no] or [1 = yes]. exiting."
	fi
	exit 1
fi
# check to see if vms should be started after an unsuccessful backup. if yes, continue. if no, continue. if input invalid, exit.
if [[ "$start_vm_after_failure" =~ ^(0|1)$ ]]; then
	if [ "$start_vm_after_failure" -eq 0 ]; then
		echo "$(date '+%Y-%m-%d %H:%M') information: start_vm_after_failure is $start_vm_after_failure. vms will not be started following an unsuccessful backup." | tee -a "$backup_location/$log_file_subfolder$timestamp""unraid-vmbackup.log"
	elif [ "$start_vm_after_failure" -eq 1 ]; then
		echo "$(date '+%Y-%m-%d %H:%M') information: start_vm_after_failure is $start_vm_after_failure. vms will be started following an unsuccessful backup." | tee -a "$backup_location/$log_file_subfolder$timestamp""unraid-vmbackup.log"
	fi
else
	echo "$(date '+%Y-%m-%d %H:%M') failure: start_vm_after_failure is $start_vm_after_failure. this is not a valid format. expecting [0 = no] or [1 = yes]. exiting." | tee -a "$backup_location/$log_file_subfolder$timestamp""unraid-vmbackup.log" && errors="1"
	if [ "$send_notifications" -eq 1 ];then
		/usr/local/emhttp/plugins/dynamix/scripts/notify -e "unraid-vmbackup_failure" -s "unRAID VM Backup script" -d "script failed" -i "alert" -m "$(date '+%Y-%m-%d %H:%M') failure: start_vm_after_failure is $start_vm_after_failure. this is not a valid format. expecting [0 = no] or [1 = yes]. exiting."
	fi
	exit 1
fi
# check to see if delta sync should be disabled. if yes, continue. if no, continue. if input invalid, exit.
if [[ "$disable_delta_sync" =~ ^(0|1)$ ]]; then
	if [ "$disable_delta_sync" -eq 0 ]; then
		echo "$(date '+%Y-%m-%d %H:%M') information: disable_delta_sync is $disable_delta_sync. rsync will be used to perform delta sync backups." | tee -a "$backup_location/$log_file_subfolder$timestamp""unraid-vmbackup.log"
	elif [ "$disable_delta_sync" -eq 1 ]; then
		echo "$(date '+%Y-%m-%d %H:%M') information: disable_delta_sync is $disable_delta_sync. no delta syncs will be done." | tee -a "$backup_location/$log_file_subfolder$timestamp""unraid-vmbackup.log"
	fi
else
	echo "$(date '+%Y-%m-%d %H:%M') failure: disable_delta_sync is $disable_delta_sync. this is not a valid format. expecting [0 = no] or [1 = yes]. exiting." | tee -a "$backup_location/$log_file_subfolder$timestamp""unraid-vmbackup.log" && errors="1"
	if [ "$send_notifications" -eq 1 ];then
		/usr/local/emhttp/plugins/dynamix/scripts/notify -e "unraid-vmbackup_failure" -s "unRAID VM Backup script" -d "script failed" -i "alert" -m "$(date '+%Y-%m-%d %H:%M') failure: disable_delta_sync is $disable_delta_sync. this is not a valid format. expecting [0 = no] or [1 = yes]. exiting."
	fi
	exit 1
fi
# check to see if only rsync should be used. if yes, continue. if no, continue. if input invalid, exit.
if [[ "$rsync_only" =~ ^(0|1)$ ]]; then
	if [ "$rsync_only" -eq 0 ]; then
		echo "$(date '+%Y-%m-%d %H:%M') information: rsync_only is $rsync_only. cp will be used when applicable." | tee -a "$backup_location/$log_file_subfolder$timestamp""unraid-vmbackup.log"
	elif [ "$rsync_only" -eq 1 ]; then
		echo "$(date '+%Y-%m-%d %H:%M') information: rsync_only is $rsync_only. only rsync will be used." | tee -a "$backup_location/$log_file_subfolder$timestamp""unraid-vmbackup.log"
	fi
else
	echo "$(date '+%Y-%m-%d %H:%M') failure: rsync_only is $rsync_only. this is not a valid format. expecting [0 = no] or [1 = yes]. exiting." | tee -a "$backup_location/$log_file_subfolder$timestamp""unraid-vmbackup.log" && errors="1"
	if [ "$send_notifications" -eq 1 ];then
		/usr/local/emhttp/plugins/dynamix/scripts/notify -e "unraid-vmbackup_failure" -s "unRAID VM Backup script" -d "script failed" -i "alert" -m "$(date '+%Y-%m-%d %H:%M') failure: rsync_only is $rsync_only. this is not a valid format. expecting [0 = no] or [1 = yes]. exiting."
	fi
	exit 1
fi
# validate the actually_copy_files option. if yes set the rsync command line option for dry-run. if input invalid, exit.
if [[ "$actually_copy_files" =~ ^(0|1)$ ]]; then
	if [ "$actually_copy_files" -eq 0 ]; then
		echo "$(date '+%Y-%m-%d %H:%M') warning: actually_copy_files flag is $actually_copy_files. no files will be copied if using rsync only mode." | tee -a "$backup_location/$log_file_subfolder$timestamp""unraid-vmbackup.log" | tee -a "$backup_location/$log_file_subfolder$timestamp""unraid-vmbackup.log"
		# create a variable which tells rsync to do a dry-run.
		rsync_dry_run_option="n"
	elif [ "$actually_copy_files" -eq 1 ]; then
		echo "$(date '+%Y-%m-%d %H:%M') information: actually_copy_files is $actually_copy_files. files will be copied." | tee -a "$backup_location/$log_file_subfolder$timestamp""unraid-vmbackup.log" | tee -a "$backup_location/$log_file_subfolder$timestamp""unraid-vmbackup.log"
	fi
else
	echo "$(date '+%Y-%m-%d %H:%M') failure: actually_copy_files is $actually_copy_files. this is not a valid format. expecting [0 = no] or [1 = yes]. exiting." | tee -a "$backup_location/$log_file_subfolder$timestamp""unraid-vmbackup.log" && errors="1"
	if [ "$send_notifications" -eq 1 ];then
		/usr/local/emhttp/plugins/dynamix/scripts/notify -e "unraid-vmbackup_failure" -s "unRAID VM Backup script" -d "script failed" -i "alert" -m "$(date '+%Y-%m-%d %H:%M') failure: actually_copy_files is $actually_copy_files. this is not a valid format. expecting [0 = no] or [1 = yes]. exiting."
	fi
	exit 1
fi
# check to see how many times vm's state should be checked for shutdown. if yes, continue if no, continue if input invalid, exit.
if [[ "$clean_shutdown_checks" =~ ^[0-9]+$ ]]; then
	if [ "$clean_shutdown_checks" -lt 5 ]; then
		echo "$(date '+%Y-%m-%d %H:%M') warning: clean_shutdown_checks is $clean_shutdown_checks. this is potentially an insufficient number of shutdown checks." | tee -a "$backup_location/$log_file_subfolder$timestamp""unraid-vmbackup.log"
	elif [ "$clean_shutdown_checks" -gt 50 ]; then
		echo "$(date '+%Y-%m-%d %H:%M') warning: clean_shutdown_checks is $clean_shutdown_checks. this is a vast number of shutdown checks." | tee -a "$backup_location/$log_file_subfolder$timestamp""unraid-vmbackup.log"
	elif [ "$clean_shutdown_checks" -ge 5 ] && [ "$clean_shutdown_checks" -le 50 ]; then
		echo "$(date '+%Y-%m-%d %H:%M') information: clean_shutdown_checks is $clean_shutdown_checks. this is probably a sufficient number of shutdown checks." | tee -a "$backup_location/$log_file_subfolder$timestamp""unraid-vmbackup.log"
	fi
else
	echo "$(date '+%Y-%m-%d %H:%M') failure: clean_shutdown_checks is $clean_shutdown_checks. this is not a valid format. expecting a number between [0 - 1000000]. exiting." | tee -a "$backup_location/$log_file_subfolder$timestamp""unraid-vmbackup.log" && errors="1"
	if [ "$send_notifications" -eq 1 ];then
		/usr/local/emhttp/plugins/dynamix/scripts/notify -e "unraid-vmbackup_failure" -s "unRAID VM Backup script" -d "script failed" -i "alert" -m "$(date '+%Y-%m-%d %H:%M') failure: clean_shutdown_checks is $clean_shutdown_checks. this is not a valid format. expecting a number between [0 - 1000000]. exiting."
	fi
	exit 1
fi
# check to see how many seconds to wait between vm shutdown checks. messages to user only. if input invalid, exit.
if [[ "$seconds_to_wait" =~ ^[0-9]+$ ]]; then
	if [ "$seconds_to_wait" -lt 30 ]; then
		echo "$(date '+%Y-%m-%d %H:%M') warning: seconds_to_wait is $seconds_to_wait. this is potentially an insufficient number of seconds to wait between shutdown checks." | tee -a "$backup_location/$log_file_subfolder$timestamp""unraid-vmbackup.log"
	elif [ "$seconds_to_wait" -gt 600 ]; then
		echo "$(date '+%Y-%m-%d %H:%M') warning: seconds_to_wait is $seconds_to_wait. this is a vast number of seconds to wait between shutdown checks." | tee -a "$backup_location/$log_file_subfolder$timestamp""unraid-vmbackup.log"
	elif [ "$seconds_to_wait" -ge 30 ] && [ "$seconds_to_wait" -le 600 ]; then
		echo "$(date '+%Y-%m-%d %H:%M') information: seconds_to_wait is $seconds_to_wait. this is probably a sufficient number of seconds to wait between shutdown checks." | tee -a "$backup_location/$log_file_subfolder$timestamp""unraid-vmbackup.log"
	fi
else
	echo "$(date '+%Y-%m-%d %H:%M') failure: seconds_to_wait is $seconds_to_wait. this is not a valid format. expecting a number between [0 - 1000000]. exiting." | tee -a "$backup_location/$log_file_subfolder$timestamp""unraid-vmbackup.log" && errors="1"
	if [ "$send_notifications" -eq 1 ];then
		/usr/local/emhttp/plugins/dynamix/scripts/notify -e "unraid-vmbackup_failure" -s "unRAID VM Backup script" -d "script failed" -i "alert" -m "$(date '+%Y-%m-%d %H:%M') failure: seconds_to_wait is $seconds_to_wait. this is not a valid format. expecting a number between [0 - 1000000]. exiting."
	fi
	exit 1
fi
# check to see if error log files should be kept. if yes, continue. if no, continue. if input invalid, exit.
if [[ "$keep_error_log_file" =~ ^(0|1)$ ]]; then
	if [ "$keep_error_log_file" -eq 0 ]; then
		echo "$(date '+%Y-%m-%d %H:%M') information: keep_error_log_file is $keep_error_log_file. error log files will not be kept." | tee -a "$backup_location/$log_file_subfolder$timestamp""unraid-vmbackup.log"
	elif  [ "$keep_error_log_file" -eq 1 ]; then
		echo "$(date '+%Y-%m-%d %H:%M') information: keep_error_log_file is $keep_error_log_file. error log files will be kept." | tee -a "$backup_location/$log_file_subfolder$timestamp""unraid-vmbackup.log"
	fi
else
	echo "$(date '+%Y-%m-%d %H:%M') failure: keep_error_log_file is $keep_error_log_file. this is not a valid format. expecting [0 = no] or [1 = yes]. exiting." | tee -a "$backup_location/$log_file_subfolder$timestamp""unraid-vmbackup.log" && errors="1"
	if [ "$send_notifications" -eq 1 ];then
		/usr/local/emhttp/plugins/dynamix/scripts/notify -e "unraid-vmbackup_failure" -s "unRAID VM Backup script" -d "script failed" -i "alert" -m "$(date '+%Y-%m-%d %H:%M') failure: keep_error_log_file is $keep_error_log_file. this is not a valid format. expecting [0 = no] or [1 = yes]. exiting."
	fi
	exit 1
fi
# check to see how many error log files should be kept. if yes, continue if no, continue if input invalid, exit.
if [[ "$number_of_error_log_files_to_keep" =~ ^[0-9]+$ ]]; then
	if [ "$number_of_error_log_files_to_keep" -lt 2 ]; then
		if [ "$number_of_error_log_files_to_keep" -eq 0 ]; then
			echo "$(date '+%Y-%m-%d %H:%M') information: number_of_error_log_files_to_keep is $number_of_error_log_files_to_keep. an infinite number of error log files will be kept. be sure to pay attention to how many error log files there are." | tee -a "$backup_location/$log_file_subfolder$timestamp""unraid-vmbackup.log"
		else
			echo "$(date '+%Y-%m-%d %H:%M') warning: number_of_error_log_files_to_keep is $number_of_error_log_files_to_keep. this is potentially an insufficient number of error log files to keep." | tee -a "$backup_location/$log_file_subfolder$timestamp""unraid-vmbackup.log"
		fi
	elif [ "$number_of_error_log_files_to_keep" -gt 40 ]; then
		echo "$(date '+%Y-%m-%d %H:%M') information: number_of_error_log_files_to_keep is $number_of_error_log_files_to_keep. this is a error lot of log files to keep." | tee -a "$backup_location/$log_file_subfolder$timestamp""unraid-vmbackup.log"
	elif [ "$number_of_error_log_files_to_keep" -ge 2 ] && [ "$number_of_error_log_files_to_keep" -le 40 ]; then
		echo "$(date '+%Y-%m-%d %H:%M') information: number_of_error_log_files_to_keep is $number_of_error_log_files_to_keep. this is probably a sufficient error number of log files to keep." | tee -a "$backup_location/$log_file_subfolder$timestamp""unraid-vmbackup.log"
	fi
else
	echo "$(date '+%Y-%m-%d %H:%M') failure: number_of_error_log_files_to_keep is $number_of_error_log_files_to_keep. this is not a valid format. expecting a number between [0 - 1000000]. exiting." | tee -a "$backup_location/$log_file_subfolder$timestamp""unraid-vmbackup.log" && errors="1"
	if [ "$send_notifications" -eq 1 ];then
		/usr/local/emhttp/plugins/dynamix/scripts/notify -e "unraid-vmbackup_failure" -s "unRAID VM Backup script" -d "script failed" -i "alert" -m "$(date '+%Y-%m-%d %H:%M') failure: number_of_error_log_files_to_keep is $number_of_error_log_files_to_keep. this is not a valid format. expecting a number between [0 - 1000000]. exiting."
	fi
	exit 1
fi
echo "$(date '+%Y-%m-%d %H:%M') information: started attempt to backup $vms_to_backup to $backup_location" | tee -a "$backup_location/$log_file_subfolder$timestamp""unraid-vmbackup.log"
# set this to force the for loop to split on new lines and not spaces.
IFS=$'\n'
# check to see if reconstruct write should be enabled by this script. if so, enable and continue.
if [ "$enable_reconstruct_write" -eq 1 ]; then
	/usr/local/sbin/mdcmd set md_write_method 1
	echo "$(date '+%Y-%m-%d %H:%M') information: Reconstruct write enabled." | tee -a "$backup_location/$log_file_subfolder$timestamp""unraid-vmbackup.log"
fi
# loop through the vms in the list and try and back up their associated xml configurations and vdisk(s).
for vm in $vms_to_backup
do
	# get a list of the vm names installed on the system.
	vm_exists=$(virsh list --all --name)
	# assume the vm is not going to be backed up until it is found on the system
	skip_vm="y"
	# check to see if the vm exists on the system to backup.
	for vmname in $vm_exists
	do
		# if the vm doesn't match then set the skip flag to y.
		if [ "$vm" == "$vmname" ] ; then
			# set a flag i am going to check later to indicate if i should skip this vm or not.
			skip_vm="n"
			# skips current loop.
			continue
		fi
	done
	# if the skip flag was set in the previous section then we have to exit and move onto the next vm in the list.
	if [ "$skip_vm" == "y" ]; then
		echo "$(date '+%Y-%m-%d %H:%M') warning: $vm can not be found on the system. skipping vm." | tee -a "$backup_location/$log_file_subfolder$timestamp""unraid-vmbackup.log" && errors="1"
	
		if [ "$send_notifications" -eq 1 ]; then
			/usr/local/emhttp/plugins/dynamix/scripts/notify -e "unraid-vmbackup_vm_backup" -s "unRAID VM Backup script" -d "script skipping $vm" -i "warning" -m "$(date '+%Y-%m-%d %H:%M') warning: $vm can not be found on the system. skipping vm."
		fi
		skip_vm="n"
		# skips current loop.
		continue
	else
		echo "$(date '+%Y-%m-%d %H:%M') information: $vm can be found on the system. attempting backup." | tee -a "$backup_location/$log_file_subfolder$timestamp""unraid-vmbackup.log"
	fi
	# lets create a directory named after the vm within backup_location to store the backup files.
	if [ ! -d "$backup_location/$vm" ] ; then
		echo "$(date '+%Y-%m-%d %H:%M') action: $backup_location/$vm does not exist. creating it." | tee -a "$backup_location/$log_file_subfolder$timestamp""unraid-vmbackup.log"
		# make the directory as it doesn't exist. added -v option to give a confirmation message to command line.
		mkdir -vp "$backup_location/$vm"
	else
		echo "$(date '+%Y-%m-%d %H:%M') information: $backup_location/$vm exists. continuing." | tee -a "$backup_location/$log_file_subfolder$timestamp""unraid-vmbackup.log"
	fi
	# see if vdisks should be backed up, if the number of backups is more than 1, and if disable delta sync is disabled.
	if [ "$backup_vdisks" -eq 1 ] && [ "$number_of_backups_to_keep" -ne 1 ] && [ "$disable_delta_sync" -ne 1 ]; then
		# get the list of the vdisks associated with the vm and address them one by one.
		vdisks=$(virsh domblklist "$vm" --details | grep -v "^$" | grep -v "^Target" | grep -v '\-\-\-\-\-' | awk -F" {2,}" '{print $4}')
		# check for the header in vdisks to see if there are any disks
		if [ "$vdisks" == "Source" ]; then
			echo "$(date '+%Y-%m-%d %H:%M') warning: there are no vdisk(s) associated with $vm to backup." | tee -a "$backup_location/$log_file_subfolder$timestamp""unraid-vmbackup.log" && errors="1"
			if [ "$send_notifications" -eq 1 ]; then
				/usr/local/emhttp/plugins/dynamix/scripts/notify -e "unraid-vmbackup_vm_backup" -s "unRAID VM Backup script" -d "no vdisk(s) for $vm" -i "warning" -m "$(date '+%Y-%m-%d %H:%M') warning: there are no vdisk(s) associated with $vm to backup."
			fi
		fi
		# get vdisk names to check on current backups
		for disk in $vdisks
		do
			if [ ! "$disk" == "Source" ]; then
				# check to see if disk should be skipped.
				skip_disk="0"
				
				for skipvdisk_name in $vdisks_to_skip
				do
					if [ "$skipvdisk_name" == "$disk" ]; then
						skip_disk="1"
						echo "$(date '+%Y-%m-%d %H:%M') information: $disk for $vm was found in vdisks_to_skip. skipping disk." | tee -a "$backup_location/$log_file_subfolder$timestamp""unraid-vmbackup.log"
					fi
				done
				# get the filename of the disk without the path.
				new_disk=$(basename "$disk")
				# get the disk number and extension
				unset -v disk_number
				vdisknameregex="[0-9]+\\.(img|qcow2)"
				if [[ $disk =~ $vdisknameregex ]]; then
					disk_number=${BASH_REMATCH[0]}
				fi
				# check the extension of the disk to ensure only vdisks are copied.
				# Do not use in conjunction with qemu-img conversion
				if [ ! "${disk##*.}" == "img" ] && [ ! "${disk##*.}" == "qcow2" ]; then
					if [ "$ignore_isos" -eq 1 ] && [ "${disk##*.}" == "iso" ] || [ "${disk##*.}" == "ISO" ]; then
						echo "$(date '+%Y-%m-%d %H:%M') information: $disk of $vm is an iso not a vdisk. skipping." | tee -a "$backup_location/$log_file_subfolder$timestamp""unraid-vmbackup.log"
					else
						echo "$(date '+%Y-%m-%d %H:%M') warning: $disk of $vm is not a vdisk. skipping." | tee -a "$backup_location/$log_file_subfolder$timestamp""unraid-vmbackup.log" && errors="1"
						if [ "$send_notifications" -eq 1 ]; then
							/usr/local/emhttp/plugins/dynamix/scripts/notify -e "unraid-vmbackup_vm_backup" -s "unRAID VM Backup script" -d "no valid vdisk(s) for $vm" -i "warning" -m "$(date '+%Y-%m-%d %H:%M') warning: $disk of $vm is not a vdisk. skipping."
						fi
					fi
					
					continue
				fi
				
				# skip the vdisk if skip_disk is set to 1
				if [ "$skip_disk" -ne 1 ]; then
					# unset variable for the most recent vdisk file.
					unset -v newest_vdisk_file
					# see if disk_number is empty. if not, set to wildcard.
					if [ -z "$disk_number" ]; then
					
						disk_number='.@(img|qcow2)'
					fi
					# enable extended globbing
					shopt -s extglob
					# get the most recent vdisk file.
					for diskimage in "$backup_location/$vm/"*"$disk_number"
					do
						[[ $diskimage -nt $newest_vdisk_file ]] && newest_vdisk_file=$diskimage
					done
					# disable extended globbing
					shopt -u extglob
					# check to see if a backup already exists for this vdisk and make a copy of it before shutting down the guest.
					if [ -f "$newest_vdisk_file" ]; then
						echo "$(date '+%Y-%m-%d %H:%M') information: copy of backup of $newest_vdisk_file vdisk to $backup_location/$vm/$timestamp$new_disk starting." | tee -a "$backup_location/$log_file_subfolder$timestamp""unraid-vmbackup.log"
						if [ "$detailed_notifications" -eq 1 ]; then
							
							if [ "$send_notifications" -eq 1 ] && [ "$only_send_error_notifications" -eq 0 ]; then
								/usr/local/emhttp/plugins/dynamix/scripts/notify -e "unraid-vmbackup_vm_backup" -s "unRAID VM Backup script" -d "script starting copy $vm backup" -i "normal" -m "$(date '+%Y-%m-%d %H:%M') information: copy of backup of $newest_vdisk_file vdisk to $backup_location/$vm/$timestamp$new_disk starting."
							fi
						fi
						if [ "$rsync_only" -eq 1 ]; then
						
							rsync -av$rsync_dry_run_option --sparse "$newest_vdisk_file" "$backup_location/$vm/$timestamp$new_disk"
							# get rsync result and send notification
							if [[ $? -eq 1 ]]; then
								if [ "$send_notifications" -eq 1 ]; then
									/usr/local/emhttp/plugins/dynamix/scripts/notify -e "unraid-vmbackup_vm_backup" -s "unRAID VM Backup script" -d "copy $vm backup failed" -i "alert" -m "$(date '+%Y-%m-%d %H:%M') failure: copy of backup of $newest_vdisk_file vdisk to $backup_location/$vm/$timestamp$new_disk failed."
								fi
							fi
						else
							cp -av --sparse=always "$newest_vdisk_file" "$backup_location/$vm/$timestamp$new_disk"
							# get cp result and send notification
							if [[ $? -eq 1 ]]; then
								if [ "$send_notifications" -eq 1 ]; then
									/usr/local/emhttp/plugins/dynamix/scripts/notify -e "unraid-vmbackup_vm_backup" -s "unRAID VM Backup script" -d "copy $vm backup failed" -i "alert" -m "$(date '+%Y-%m-%d %H:%M') failure: copy of backup of $newest_vdisk_file vdisk to $backup_location/$vm/$timestamp$new_disk failed."
								fi
							fi
						fi
						# make sure copy has current date/time for modified attribute so that removing old disks by date will work.
						touch -d "now" "$backup_location/$vm/$timestamp$new_disk"
						# send a message to the user based on whether there was an actual copy or a dry-run.
						if [ "$actually_copy_files" -eq 0 ]; then
							echo "$(date '+%Y-%m-%d %H:%M') information: dry-run copy of backup of $newest_vdisk_file vdisk to $backup_location/$vm/$timestamp$new_disk complete." | tee -a "$backup_location/$log_file_subfolder$timestamp""unraid-vmbackup.log"
						else
							echo "$(date '+%Y-%m-%d %H:%M') information: copy of backup of $newest_vdisk_file vdisk to $backup_location/$vm/$timestamp$new_disk complete." | tee -a "$backup_location/$log_file_subfolder$timestamp""unraid-vmbackup.log"
							if [ "$detailed_notifications" -eq 1 ]; then
								
								if [ "$send_notifications" -eq 1 ] && [ "$only_send_error_notifications" -eq 0 ]; then
									/usr/local/emhttp/plugins/dynamix/scripts/notify -e "unraid-vmbackup_vm_backup" -s "unRAID VM Backup script" -d "script completed copy $vm backup" -i "normal" -m "$(date '+%Y-%m-%d %H:%M') information: copy of backup of $newest_vdisk_file vdisk to $backup_location/$vm/$timestamp$new_disk complete."
								fi
							fi
						fi
					fi
					
				fi
			fi
		done
	fi
	# get the state of the vm for making sure it is off before backing up.
	vm_state=$(virsh domstate "$vm")
	# get the state of the vm for putting the VM in it's original state after backing up.
	vm_original_state=$vm_state
	# resume the vm if it is suspended, based on testing this should be instant but will trap later if it has not resumed.
	if [ "$vm_state" == "paused" ]; then
		echo "$(date '+%Y-%m-%d %H:%M') action: $vm is $vm_state. resuming." | tee -a "$backup_location/$log_file_subfolder$timestamp""unraid-vmbackup.log"
		# resume the vm.
		virsh resume "$vm"
	fi
### Added: if statement to check if vm is running and backup enable is set to 1, if enabled "can_backup_vm=" is set to "1" and a snapshot of vdisk is made before backup.
	if [ "$vm_state" == "running" ] && [ "$enable_backup_running_vm" -eq 1 ]; then
	# set a flag to check later to indicate whether to backup this vm or not.
	can_backup_vm="y"
	echo "$(date '+%Y-%m-%d %H:%M') information: $vm is $vm_state. can_backup_vm set to $can_backup_vm enable_backup_running_vm is set to $enable_backup_running_vm $vm will not shutdown" | tee -a "$backup_location/$log_file_subfolder$timestamp""unraid-vmbackup.log"
	else
	
##################
	# if the vm is running try and shut it down.
		if [ "$vm_state" == "running" ]; then
			echo "$(date '+%Y-%m-%d %H:%M') action: $vm is $vm_state. shutting down." | tee -a "$backup_location/$log_file_subfolder$timestamp""unraid-vmbackup.log"
			#attempt to cleanly shutdown the vm.
			virsh shutdown "$vm"
			echo "$(date '+%Y-%m-%d %H:%M') information: performing $clean_shutdown_checks $seconds_to_wait second cycles waiting for $vm to shutdown cleanly" | tee -a "$backup_location/$log_file_subfolder$timestamp""unraid-vmbackup.log"
			#the shutdown of the vm may last a while so we are going to check periodically based on global input variables.
			for (( i=1; i<=clean_shutdown_checks; i++ ))
			do
				echo "$(date '+%Y-%m-%d %H:%M') information: cycle $i of $clean_shutdown_checks: waiting $seconds_to_wait seconds before checking if the vm has shutdown" | tee -a "$backup_location/$log_file_subfolder$timestamp""unraid-vmbackup.log"
				# wait x seconds based on how many seconds the user wants to wait between checks for a clean shutdown.
				sleep $seconds_to_wait
				# get the state of the vm.
				vm_state=$(virsh domstate "$vm")
				# if the vm is running decide what to do.
				if [ "$vm_state" == "running" ]; then
					echo "$(date '+%Y-%m-%d %H:%M') information: $vm is $vm_state" | tee -a "$backup_location/$log_file_subfolder$timestamp""unraid-vmbackup.log"
					# if we have already exhausted our wait time set by the script variables then its time to do something else.
					if [ $i = "$clean_shutdown_checks" ] ; then
						# check if the user wants to kill the vm on failure of unclean shutdown.
						if [ "$kill_vm_if_cant_shutdown" -eq 1 ]; then
							echo "$(date '+%Y-%m-%d %H:%M') action: kill_vm_if_cant_shutdown is $kill_vm_if_cant_shutdown. killing vm." | tee -a "$backup_location/$log_file_subfolder$timestamp""unraid-vmbackup.log"
							# destroy vm, based on testing this should be instant and without failure.
							virsh destroy "$vm"
							# get the state of the vm.
							vm_state=$(virsh domstate "$vm")
							# if the vm is shut off then proceed or give up.
							if [ "$vm_state" == "shut off" ]; then
								# set a flag to check later to indicate whether to backup this vm or not.
								can_backup_vm="y"
								echo "$(date '+%Y-%m-%d %H:%M') information: $vm is $vm_state. can_backup_vm set to $can_backup_vm" | tee -a "$backup_location/$log_file_subfolder$timestamp""unraid-vmbackup.log"
								break
							else
								# set a flag to check later to indicate whether to backup this vm or not.
								can_backup_vm="n"
								echo "$(date '+%Y-%m-%d %H:%M') failure: $vm is $vm_state. can_backup_vm set to $can_backup_vm" | tee -a "$backup_location/$log_file_subfolder$timestamp""unraid-vmbackup.log" && errors="1"
								if [ "$send_notifications" -eq 1 ];then
									/usr/local/emhttp/plugins/dynamix/scripts/notify -e "unraid-vmbackup_failure" -s "unRAID VM Backup script" -d "$vm backup failed" -i "alert" -m "$(date '+%Y-%m-%d %H:%M')" "failure: $vm is $vm_state. can_backup_vm set to $can_backup_vm"
								fi
							fi
						# if the user doesn't want to force a shutdown then there is nothing more to do so i cannot backup the vm.
						else
							# set a flag to check later to indicate whether to backup this vm or not.
							can_backup_vm="n"
							echo "$(date '+%Y-%m-%d %H:%M') failure: $vm is $vm_state. can_backup_vm set to $can_backup_vm" | tee -a "$backup_location/$log_file_subfolder$timestamp""unraid-vmbackup.log" && errors="1"
							if [ "$send_notifications" -eq 1 ];then
								/usr/local/emhttp/plugins/dynamix/scripts/notify -e "unraid-vmbackup_failure" -s "unRAID VM Backup script" -d "$vm backup failed" -i "alert" -m "$(date '+%Y-%m-%d %H:%M') failure: $vm is $vm_state. can_backup_vm set to $can_backup_vm"
							fi
						fi
					fi
				# if the vm is shut off then go onto backing it up.
				elif [ "$vm_state" == "shut off" ]; then
					# set a flag to check later to indicate whether to backup this vm or not.
					can_backup_vm="y"
					echo "$(date '+%Y-%m-%d %H:%M') information: $vm is $vm_state. can_backup_vm set to $can_backup_vm" | tee -a "$backup_location/$log_file_subfolder$timestamp""unraid-vmbackup.log"
					break
				# if the vm is in a state that is not explicitly defined then do nothing as it is unknown how to handle it.
				else
					# set a flag to check later to indicate whether to backup this vm or not.
					can_backup_vm="n"
					echo "$(date '+%Y-%m-%d %H:%M') failure: $vm is $vm_state. can_backup_vm set to $can_backup_vm" | tee -a "$backup_location/$log_file_subfolder$timestamp""unraid-vmbackup.log" && errors="1"
					if [ "$send_notifications" -eq 1 ];then
						/usr/local/emhttp/plugins/dynamix/scripts/notify -e "unraid-vmbackup_failure" -s "unRAID VM Backup script" -d "$vm backup failed" -i "alert" -m "$(date '+%Y-%m-%d %H:%M') failure: $vm is $vm_state. can_backup_vm set to $can_backup_vm"
					fi
				fi
			done
		fi
		fi
	# if the vm is shut off then go straight onto backing it up.
	if [ "$vm_state" == "shut off" ]; then
		# set a flag to check later to indicate whether to backup this vm or not.
		can_backup_vm="y"
		echo "$(date '+%Y-%m-%d %H:%M') information: $vm is $vm_state. can_backup_vm set to $can_backup_vm" | tee -a "$backup_location/$log_file_subfolder$timestamp""unraid-vmbackup.log"
	### added becuase edited if statment from line 1342. this is to keep basic functionality of original script
	elif [ "$vm_state" == "running" ]; then
		# set a flag to check later to indicate whether to backup this vm or not.
		can_backup_vm="y"
		echo "$(date '+%Y-%m-%d %H:%M') information: $vm is $vm_state. can_backup_vm set to $can_backup_vm" | tee -a "$backup_location/$log_file_subfolder$timestamp""unraid-vmbackup.log"
	# if the vm is suspended then something went wrong with the attempt to recover it earlier so do not attempt to backup.
	elif [ "$vm_state" == "suspended" ]; then
		# set a flag to check later to indicate whether to backup this vm or not.
		can_backup_vm="n"
		echo "$(date '+%Y-%m-%d %H:%M') failure: $vm is $vm_state. can_backup_vm set to $can_backup_vm" | tee -a "$backup_location/$log_file_subfolder$timestamp""unraid-vmbackup.log" && errors="1"
		if [ "$send_notifications" -eq 1 ];then
			/usr/local/emhttp/plugins/dynamix/scripts/notify -e "unraid-vmbackup_failure" -s "unRAID VM Backup script" -d "$vm backup failed" -i "alert" -m "$(date '+%Y-%m-%d %H:%M') failure: $vm is $vm_state. can_backup_vm set to $can_backup_vm"
		fi
	# if the vm is in a state that has not been explicitly defined then do nothing as it is unknown how to handle it.
	else
		# set a flag to check later to indicate whether to backup this vm or not.
		can_backup_vm="n"
		echo "$(date '+%Y-%m-%d %H:%M') failure: $vm is $vm_state. can_backup_vm set to $can_backup_vm" | tee -a "$backup_location/$log_file_subfolder$timestamp""unraid-vmbackup.log" && errors="1"
		if [ "$send_notifications" -eq 1 ];then
			/usr/local/emhttp/plugins/dynamix/scripts/notify -e "unraid-vmbackup_failure" -s "unRAID VM Backup script" -d "$vm backup failed" -i "alert" -m "$(date '+%Y-%m-%d %H:%M') failure: $vm is $vm_state. can_backup_vm set to $can_backup_vm"
		fi
	fi
	# log if this is a dry run or not.
	echo "$(date '+%Y-%m-%d %H:%M') action: actually_copy_files is $actually_copy_files." | tee -a "$backup_location/$log_file_subfolder$timestamp""unraid-vmbackup.log"
	# check whether to backup the vm or not.
	if [[ "$can_backup_vm" == "y" ]]; then
		echo "$(date '+%Y-%m-%d %H:%M') action: can_backup_vm flag is $can_backup_vm. starting backup of $vm configuration, nvram, and vdisk(s)." | tee -a "$backup_location/$log_file_subfolder$timestamp""unraid-vmbackup.log"
		if [ "$detailed_notifications" -eq 1 ]; then
			
			if [ "$send_notifications" -eq 1 ] && [ "$only_send_error_notifications" -eq 0 ]; then
				/usr/local/emhttp/plugins/dynamix/scripts/notify -e "unraid-vmbackup_vm_backup" -s "unRAID VM Backup script" -d "script starting $vm backup" -i "normal" -m "$(date '+%Y-%m-%d %H:%M') action: can_backup_vm flag is $can_backup_vm. starting backup of $vm xml configuration and vdisk(s)."
			fi
		fi
		# see if xml should be backed up.
		if [ "$backup_xml" -eq 1 ]; then
			# dump the vm xml configuration locally first.
			virsh dumpxml "$vm" > "$vm.xml"
			# check if only one non-timestamped backup is being kept. if so, perform rsync without a timestamp. if not, continue as normal.
			if [ "$timestamp_files" -eq 0 ]  && [ "$number_of_backups_to_keep" -eq 1 ]; then
			
				# copy or pretend to copy the xml configuration to the backup location specified by the user.
				rsync -av$rsync_dry_run_option "$vm.xml" "$backup_location/$vm/$vm.xml"
				# get rsync result and send notification
				if [[ $? -eq 1 ]]; then
					if [ "$send_notifications" -eq 1 ]; then
						/usr/local/emhttp/plugins/dynamix/scripts/notify -e "unraid-vmbackup_vm_backup" -s "unRAID VM Backup script" -d "$vm.xml backup failed" -i "alert" -m "$(date '+%Y-%m-%d %H:%M') failure: copy of backup of $vm.xml to $backup_location/$vm/$vm.xml failed."
					fi
				fi
				# make sure copy has current date/time for modified attribute so that removing old disks by date will work.
				touch -d "now" "$backup_location/$vm/$vm.xml"
				# check to see if compare_files is enabled. if yes, check for xml differences.
				if [ "$compare_files" -eq 1 ]; then
					if ! cmp -s "$vm.xml" "$backup_location/$vm/$vm.xml"; then
						echo "$(date '+%Y-%m-%d %H:%M') warning: $vm xml backup file is different than source file. retrying backup." | tee -a "$backup_location/$log_file_subfolder$timestamp""unraid-vmbackup.log" && errors="1"
						if [ "$send_notifications" -eq 1 ]; then
							/usr/local/emhttp/plugins/dynamix/scripts/notify -e "unraid-vmbackup_vm_backup" -s "unRAID VM Backup script" -d "$vm.xml compare failed" -i "warning" -m "$(date '+%Y-%m-%d %H:%M') warning: xml backup file is different than source file. retrying backup."
						fi
						rsync -av$rsync_dry_run_option "$vm.xml" "$backup_location/$vm/$vm.xml"
						# get rsync result and send notification
						if [[ $? -eq 1 ]]; then
							if [ "$send_notifications" -eq 1 ]; then
								/usr/local/emhttp/plugins/dynamix/scripts/notify -e "unraid-vmbackup_vm_backup" -s "unRAID VM Backup script" -d "$vm.xml backup failed" -i "alert" -m "$(date '+%Y-%m-%d %H:%M') failure: copy of backup of $vm.xml to $backup_location/$vm/$vm.xml failed."
							fi
						fi
						# make sure copy has current date/time for modified attribute so that removing old disks by date will work.
						touch -d "now" "$backup_location/$vm/$vm.xml"
						if ! cmp -s "$vm.xml" "$backup_location/$vm/$vm.xml"; then
							echo "$(date '+%Y-%m-%d %H:%M') failure: $vm xml backup file failed second comparison." | tee -a "$backup_location/$log_file_subfolder$timestamp""unraid-vmbackup.log" && errors="1"
					
							if [ "$send_notifications" -eq 1 ]; then
								/usr/local/emhttp/plugins/dynamix/scripts/notify -e "unraid-vmbackup_vm_backup" -s "unRAID VM Backup script" -d "$vm.xml second compare failed" -i "alert" -m "$(date '+%Y-%m-%d %H:%M') failure: xml backup file failed second comparison."
							fi
						else
							echo "$(date '+%Y-%m-%d %H:%M') information: $vm xml backup file passed second comparison. moving on." | tee -a "$backup_location/$log_file_subfolder$timestamp""unraid-vmbackup.log"
						fi
					else
						echo "$(date '+%Y-%m-%d %H:%M') information: $vm xml backup file matches source file. moving on." | tee -a "$backup_location/$log_file_subfolder$timestamp""unraid-vmbackup.log"
					fi
				fi
			else
			
				# copy or pretend to copy the xml configuration to the backup location specified by the user.
				rsync -av$rsync_dry_run_option "$vm.xml" "$backup_location/$vm/$timestamp$vm.xml"
				# get rsync result and send notification
				if [[ $? -eq 1 ]]; then
					if [ "$send_notifications" -eq 1 ]; then
						/usr/local/emhttp/plugins/dynamix/scripts/notify -e "unraid-vmbackup_vm_backup" -s "unRAID VM Backup script" -d "$vm.xml backup failed" -i "alert" -m "$(date '+%Y-%m-%d %H:%M') failure: copy of backup of $vm.xml to $backup_location/$vm/$timestamp$vm.xml failed."
					fi
				fi
				# make sure copy has current date/time for modified attribute so that removing old disks by date will work.
				touch -d "now" "$backup_location/$vm/$timestamp$vm.xml"
				# check to see if compare_files is enabled. if yes, check for xml differences.
				if [ "$compare_files" -eq 1 ]; then
					if ! cmp -s "$vm.xml" "$backup_location/$vm/$timestamp$vm.xml"; then
						echo "$(date '+%Y-%m-%d %H:%M') warning: $vm xml backup file is different than source file. retrying backup." | tee -a "$backup_location/$log_file_subfolder$timestamp""unraid-vmbackup.log" && errors="1"
					
						if [ "$send_notifications" -eq 1 ]; then
							/usr/local/emhttp/plugins/dynamix/scripts/notify -e "unraid-vmbackup_vm_backup" -s "unRAID VM Backup script" -d "$vm.xml compare failed" -i "warning" -m "$(date '+%Y-%m-%d %H:%M') warning: xml backup file is different than source file. retrying backup."
						fi
						rsync -av$rsync_dry_run_option "$vm.xml" "$backup_location/$vm/$timestamp$vm.xml"
						# get rsync result and send notification
						if [[ $? -eq 1 ]]; then
							if [ "$send_notifications" -eq 1 ]; then
								/usr/local/emhttp/plugins/dynamix/scripts/notify -e "unraid-vmbackup_vm_backup" -s "unRAID VM Backup script" -d "$vm.xml backup failed" -i "alert" -m "$(date '+%Y-%m-%d %H:%M') failure: copy of backup of $vm.xml to $backup_location/$vm/$timestamp$vm.xml failed."
							fi
						fi
						# make sure copy has current date/time for modified attribute so that removing old disks by date will work.
						touch -d "now" "$backup_location/$vm/$timestamp$vm.xml"
						if ! cmp -s "$vm.xml" "$backup_location/$vm/$timestamp$vm.xml"; then
							echo "$(date '+%Y-%m-%d %H:%M') failure: $vm xml backup file failed second comparison." | tee -a "$backup_location/$log_file_subfolder$timestamp""unraid-vmbackup.log" && errors="1"
							if [ "$send_notifications" -eq 1 ]; then
								/usr/local/emhttp/plugins/dynamix/scripts/notify -e "unraid-vmbackup_vm_backup" -s "unRAID VM Backup script" -d "$vm.xml second compare failed" -i "alert" -m "$(date '+%Y-%m-%d %H:%M') failure: xml backup file failed second comparison."
							fi
						else
							echo "$(date '+%Y-%m-%d %H:%M') information: $vm xml backup file passed second comparison. moving on." | tee -a "$backup_location/$log_file_subfolder$timestamp""unraid-vmbackup.log"
						fi
					else
						echo "$(date '+%Y-%m-%d %H:%M') information: $vm xml backup file matches source file. moving on." | tee -a "$backup_location/$log_file_subfolder$timestamp""unraid-vmbackup.log"
					fi
				fi
			fi
			# delete the local copy of the xml configuration.
			rm "$vm.xml"
			# send a message to the user based on whether there was an actual copy or a dry-run.
			if [ "$actually_copy_files" -eq 0 ]; then
				echo "$(date '+%Y-%m-%d %H:%M') information: dry-run backup of $vm xml configuration to $backup_location/$vm/$timestamp$vm.xml complete." | tee -a "$backup_location/$log_file_subfolder$timestamp""unraid-vmbackup.log"
			else
				echo "$(date '+%Y-%m-%d %H:%M') information: backup of $vm xml configuration to $backup_location/$vm/$timestamp$vm.xml complete." | tee -a "$backup_location/$log_file_subfolder$timestamp""unraid-vmbackup.log"
			fi
			
		fi
		# see if nvram should be backed up.
		if [ "$backup_nvram" -eq 1 ]; then
			# dump the vm xml configuration locally first.
			virsh dumpxml "$vm" > "$vm.xml"
			# extract nvram path from xml file.
			nvram_path=$(xmllint --xpath "string(/domain/os/nvram)" "$vm.xml")
			# get nvram file name from path.
			nvram_filename=$(basename "$nvram_path")
			# delete the local copy of the xml configuration.
			rm "$vm.xml"
			# check to see if nvram_path is empty.
			if [ -z "$nvram_path" ]; then
				echo "$(date '+%Y-%m-%d %H:%M') information: $vm does not appear to have an nvram file. skipping." | tee -a "$backup_location/$log_file_subfolder$timestamp""unraid-vmbackup.log"
			else
				# check if only one non-timestamped backup is being kept. if so, perform rsync without a timestamp. if not, continue as normal.
				if [ "$timestamp_files" -eq 0 ]  && [ "$number_of_backups_to_keep" -eq 1 ]; then
				
					# copy or pretend to copy the xml configuration to the backup location specified by the user.
					rsync -av$rsync_dry_run_option "$nvram_path" "$backup_location/$vm/$nvram_filename"
					# get rsync result and send notification
					if [[ $? -eq 1 ]]; then
						if [ "$send_notifications" -eq 1 ]; then
							/usr/local/emhttp/plugins/dynamix/scripts/notify -e "unraid-vmbackup_vm_backup" -s "unRAID VM Backup script" -d "$vm nvram backup failed" -i "alert" -m "$(date '+%Y-%m-%d %H:%M') failure: copy of backup of $vm nvram to $backup_location/$vm/$nvram_filename failed."
						fi
					fi
					# make sure copy has current date/time for modified attribute so that removing old disks by date will work.
					touch -d "now" "$backup_location/$vm/$nvram_filename"
					# check to see if compare_files is enabled. if yes, check for xml differences.
					if [ "$compare_files" -eq 1 ]; then
						if ! cmp -s "$nvram_path" "$backup_location/$vm/$nvram_filename"; then
							echo "$(date '+%Y-%m-%d %H:%M') warning: $vm nvram backup file is different than source file. retrying backup." | tee -a "$backup_location/$log_file_subfolder$timestamp""unraid-vmbackup.log" && errors="1"
							if [ "$send_notifications" -eq 1 ]; then
								/usr/local/emhttp/plugins/dynamix/scripts/notify -e "unraid-vmbackup_vm_backup" -s "unRAID VM Backup script" -d "$vm nvram compare failed" -i "warning" -m "$(date '+%Y-%m-%d %H:%M') warning: nvram backup file is different than source file. retrying backup."
							fi
							rsync -av$rsync_dry_run_option "$nvram_path" "$backup_location/$vm/$nvram_filename"
							# get rsync result and send notification
							if [[ $? -eq 1 ]]; then
								if [ "$send_notifications" -eq 1 ]; then
									/usr/local/emhttp/plugins/dynamix/scripts/notify -e "unraid-vmbackup_vm_backup" -s "unRAID VM Backup script" -d "$vm nvram backup failed" -i "alert" -m "$(date '+%Y-%m-%d %H:%M') failure: copy of backup of $vm nvram to $backup_location/$vm/$nvram_filename failed."
								fi
							fi
							# make sure copy has current date/time for modified attribute so that removing old disks by date will work.
							touch -d "now" "$backup_location/$vm/$nvram_filename"
							if ! cmp -s "$nvram_path" "$backup_location/$vm/$nvram_filename"; then
								echo "$(date '+%Y-%m-%d %H:%M') failure: $vm nvram backup file failed second comparison." | tee -a "$backup_location/$log_file_subfolder$timestamp""unraid-vmbackup.log" && errors="1"
						
								if [ "$send_notifications" -eq 1 ]; then
									/usr/local/emhttp/plugins/dynamix/scripts/notify -e "unraid-vmbackup_vm_backup" -s "unRAID VM Backup script" -d "$vm nvram second compare failed" -i "alert" -m "$(date '+%Y-%m-%d %H:%M') failure: nvram backup file failed second comparison."
								fi
							else
								echo "$(date '+%Y-%m-%d %H:%M') information: $vm nvram backup file passed second comparison. moving on." | tee -a "$backup_location/$log_file_subfolder$timestamp""unraid-vmbackup.log"
							fi
						else
							echo "$(date '+%Y-%m-%d %H:%M') information: $vm nvram backup file matches source file. moving on." | tee -a "$backup_location/$log_file_subfolder$timestamp""unraid-vmbackup.log"
						fi
					fi
				else
				
					# copy or pretend to copy the xml configuration to the backup location specified by the user.
					rsync -av$rsync_dry_run_option "$nvram_path" "$backup_location/$vm/$timestamp$nvram_filename"
					# get rsync result and send notification
					if [[ $? -eq 1 ]]; then
						if [ "$send_notifications" -eq 1 ]; then
							/usr/local/emhttp/plugins/dynamix/scripts/notify -e "unraid-vmbackup_vm_backup" -s "unRAID VM Backup script" -d "$vm nvram backup failed" -i "alert" -m "$(date '+%Y-%m-%d %H:%M') failure: copy of backup of $vm to $backup_location/$vm/$timestamp$nvram_filename failed."
						fi
					fi
					# make sure copy has current date/time for modified attribute so that removing old disks by date will work.
					touch -d "now" "$backup_location/$vm/$timestamp$nvram_filename"
					# check to see if compare_files is enabled. if yes, check for xml differences.
					if [ "$compare_files" -eq 1 ]; then
						if ! cmp -s "$nvram_path" "$backup_location/$vm/$timestamp$nvram_filename"; then
							echo "$(date '+%Y-%m-%d %H:%M') warning: $vm nvram backup file is different than source file. retrying backup." | tee -a "$backup_location/$log_file_subfolder$timestamp""unraid-vmbackup.log" && errors="1"
						
							if [ "$send_notifications" -eq 1 ]; then
								/usr/local/emhttp/plugins/dynamix/scripts/notify -e "unraid-vmbackup_vm_backup" -s "unRAID VM Backup script" -d "$vm nvram compare failed" -i "warning" -m "$(date '+%Y-%m-%d %H:%M') warning: nvram backup file is different than source file. retrying backup."
							fi
							rsync -av$rsync_dry_run_option "$nvram_path" "$backup_location/$vm/$timestamp$nvram_filename"
							# get rsync result and send notification
							if [[ $? -eq 1 ]]; then
								if [ "$send_notifications" -eq 1 ]; then
									/usr/local/emhttp/plugins/dynamix/scripts/notify -e "unraid-vmbackup_vm_backup" -s "unRAID VM Backup script" -d "$vm nvram backup failed" -i "alert" -m "$(date '+%Y-%m-%d %H:%M') failure: copy of backup of $vm to $backup_location/$vm/$timestamp$nvram_filename failed."
								fi
							fi
							# make sure copy has current date/time for modified attribute so that removing old disks by date will work.
							touch -d "now" "$backup_location/$vm/$timestamp$nvram_filename"
							if ! cmp -s "$nvram_path" "$backup_location/$vm/$timestamp$nvram_filename"; then
								echo "$(date '+%Y-%m-%d %H:%M') failure: $vm nvram backup file failed second comparison." | tee -a "$backup_location/$log_file_subfolder$timestamp""unraid-vmbackup.log" && errors="1"
								if [ "$send_notifications" -eq 1 ]; then
									/usr/local/emhttp/plugins/dynamix/scripts/notify -e "unraid-vmbackup_vm_backup" -s "unRAID VM Backup script" -d "$vm nvram second compare failed" -i "alert" -m "$(date '+%Y-%m-%d %H:%M') failure: nvram backup file failed second comparison."
								fi
							else
								echo "$(date '+%Y-%m-%d %H:%M') information: $vm nvram backup file passed second comparison. moving on." | tee -a "$backup_location/$log_file_subfolder$timestamp""unraid-vmbackup.log"
							fi
						else
							echo "$(date '+%Y-%m-%d %H:%M') information: $vm nvram backup file matches source file. moving on." | tee -a "$backup_location/$log_file_subfolder$timestamp""unraid-vmbackup.log"
						fi
					fi
				fi
				# send a message to the user based on whether there was an actual copy or a dry-run.
				if [ "$actually_copy_files" -eq 0 ]; then
					echo "$(date '+%Y-%m-%d %H:%M') information: dry-run backup of $vm nvram to $backup_location/$vm/$timestamp$nvram_filename complete." | tee -a "$backup_location/$log_file_subfolder$timestamp""unraid-vmbackup.log"
				else
					echo "$(date '+%Y-%m-%d %H:%M') information: backup of $vm nvram to $backup_location/$vm/$timestamp$nvram_filename complete." | tee -a "$backup_location/$log_file_subfolder$timestamp""unraid-vmbackup.log"
				fi
			fi
						
		fi
		# see if vdisks should be backed up.
		if [ "$backup_vdisks" -eq 1 ]; then
			# get the list of the vdisks associated with the vm and address them one by one.
			vdisks=$(virsh domblklist "$vm" --details | grep -v "^$" | grep -v "^Target" | grep -v '\-\-\-\-\-' | awk -F" {2,}" '{print $4}')
			# check for the header in vdisks to see if there are any disks
			if [ "$vdisks" == "Source" ]; then
				echo "$(date '+%Y-%m-%d %H:%M') warning: there are no vdisk(s) associated with $vm to backup." | tee -a "$backup_location/$log_file_subfolder$timestamp""unraid-vmbackup.log" && errors="1"
				if [ "$send_notifications" -eq 1 ]; then
					/usr/local/emhttp/plugins/dynamix/scripts/notify -e "unraid-vmbackup_vm_backup" -s "unRAID VM Backup script" -d "no vdisk(s) for $vm" -i "warning" -m "$(date '+%Y-%m-%d %H:%M') warning: there are no vdisk(s) associated with $vm to backup."
				fi
			fi
			for disk in $vdisks
			do
				
				if [ ! "$disk" == "Source" ]; then
					# check to see if disk should be skipped.
					skip_disk="0"
					
					for skipvdisk_name in $vdisks_to_skip
					do
						if [ "$skipvdisk_name" == "$disk" ]; then
							skip_disk="1"
							echo "$(date '+%Y-%m-%d %H:%M') information: $disk for $vm was found in vdisks_to_skip. skipping disk." | tee -a "$backup_location/$log_file_subfolder$timestamp""unraid-vmbackup.log"
						fi
					done
					# get the filename of the disk without the path.
					new_disk=$(basename "$disk")
					# check the extension of the disk to ensure only vdisks are copied.
					# Do not use in conjunction with qemu-img conversion
					if [ ! "${disk##*.}" == "img" ] && [ ! "${disk##*.}" == "qcow2" ]; then
						if [ "$ignore_isos" -eq 1 ] && [ "${disk##*.}" == "iso" ] || [ "${disk##*.}" == "ISO" ]; then
							echo "$(date '+%Y-%m-%d %H:%M') information: $disk of $vm is an iso not a vdisk. skipping." | tee -a "$backup_location/$log_file_subfolder$timestamp""unraid-vmbackup.log"
						else
							echo "$(date '+%Y-%m-%d %H:%M') warning: $disk of $vm is not a vdisk. skipping." | tee -a "$backup_location/$log_file_subfolder$timestamp""unraid-vmbackup.log" && errors="1"
							if [ "$send_notifications" -eq 1 ]; then
								/usr/local/emhttp/plugins/dynamix/scripts/notify -e "unraid-vmbackup_vm_backup" -s "unRAID VM Backup script" -d "no valid vdisk(s) for $vm" -i "warning" -m "$(date '+%Y-%m-%d %H:%M') warning: $disk of $vm is not a vdisk. skipping."
							fi
						fi
						
						continue
					fi
					# skip the vdisk if skip_disk is set to 1
					if [ "$skip_disk" -ne 1 ]; then
						if [ "$vm_state" == "running" ]; then
### Added: diskpath, disknumber and qa. diskpart: we need diskpath to know wich vdisk to snapshot. disknumber: needed for creating snapshot. qa: needed to check if qemu quest agent is installed inside a vm
						diskPath=$(virsh domblklist $vm | grep -i $disk| awk '{ print $2 }')
						disknumber=$(virsh domblklist $vm | grep -i $disk| awk '{ print $1 }')
						qa=$(virsh qemu-agent-command $vm '{"execute":"guest-info"}' | grep -c "version" | awk '{ print $0 }')
                                                #check if .snap.img exists and delete this MF before we begin
						if [ $diskPath.snap.img ]
						then
						rm -f $diskPath.snap.img
						sleep 2
						fi
### Added: if statment to check if qemu-agent is installed and running or not
							if [[ "$qa" == "1" ]]; then 
							echo "$(date '+%Y-%m-%d %H:%M') qemu-agent is installed and running, adding --quiesce parameter to make sure we have a consistent disk state before snapshot and backup. Allows the guest to flush its I/O into a stable state before the snapshot is created, which allows use of the snapshot without having to perform a fsck or losing partial database transactions. $agent"
							agent="--quiesce"
							else
							echo "$(date '+%Y-%m-%d %H:%M') qemu-agent not installed or not running, please install qemu-agent inside vm to make sure we have a consistent disk state before snapshot and backup.  NOT adding --quiesce parameter."
							fi
### Added: creates a snapshot if backup running vm is enabled.						
						virsh snapshot-create-as --domain $vm --name snap.img --diskspec $disknumber,file=$diskPath.snap.img --disk-only --atomic --no-metadata $agent
						echo "for $vm"
						else
						echo "$(date '+%Y-%m-%d %H:%M') $vm is not running, we do not need to create a snapshot before backup"
						fi
						# copy or pretend to copy the vdisk to the backup location specified by the user.
						# check if only one non-timestamped backup is being kept. if so, perform cp -f without a timestamp. if not, continue as normal.
						if [ "$timestamp_files" -eq 0 ]  && [ "$number_of_backups_to_keep" -eq 1 ]; then
							if [ "$rsync_only" -eq 1 ]; then
								echo "rsync"
								rsync -av$rsync_dry_run_option --sparse "$disk" "$backup_location/$vm/$new_disk"
								
								# get rsync result and send notification
								if [[ $? -eq 1 ]]; then
									if [ "$send_notifications" -eq 1 ]; then
										/usr/local/emhttp/plugins/dynamix/scripts/notify -e "unraid-vmbackup_vm_backup" -s "unRAID VM Backup script" -d "$vm vdisk backup failed" -i "alert" -m "$(date '+%Y-%m-%d %H:%M') failure: copy of backup of $disk to $backup_location/$vm/$new_disk failed."
									fi
								fi
							else
								cp -afv --sparse=always "$disk" "$backup_location/$vm/$new_disk"
							fi
							# make sure copy has current date/time for modified attribute so that removing old disks by date will work.
							touch -d "now" "$backup_location/$vm/$new_disk"
							# check to see if compare_files is enabled. if yes, check for vdisk differences.
							if [ "$compare_files" -eq 1 ]; then
								if ! cmp -s "$disk" "$backup_location/$vm/$new_disk"; then
									echo "$(date '+%Y-%m-%d %H:%M') warning: $vm vdisk backup file is different than source file. attempting slower rsync backup." | tee -a "$backup_location/$log_file_subfolder$timestamp""unraid-vmbackup.log" && errors="1"
									if [ "$send_notifications" -eq 1 ]; then
										/usr/local/emhttp/plugins/dynamix/scripts/notify -e "unraid-vmbackup_vm_backup" -s "unRAID VM Backup script" -d "$vm vdisk compare failed" -i "warning" -m "$(date '+%Y-%m-%d %H:%M') warning: vdisk backup file is different than source file. attempting slower rsync backup."
									fi
									rsync -av$rsync_dry_run_option --sparse "$disk" "$backup_location/$vm/$new_disk"
									# get rsync result and send notification
									if [[ $? -eq 1 ]]; then
										if [ "$send_notifications" -eq 1 ]; then
											/usr/local/emhttp/plugins/dynamix/scripts/notify -e "unraid-vmbackup_vm_backup" -s "unRAID VM Backup script" -d "$vm vdisk backup failed" -i "alert" -m "$(date '+%Y-%m-%d %H:%M') failure: copy of backup of $disk to $backup_location/$vm/$new_disk failed."
										fi
									fi
									# make sure copy has current date/time for modified attribute so that removing old disks by date will work.
									touch -d "now" "$backup_location/$vm/$new_disk"
									if ! cmp -s "$disk" "$backup_location/$vm/$new_disk"; then
										echo "$(date '+%Y-%m-%d %H:%M') failure: $vm vdisk backup file failed second comparison." | tee -a "$backup_location/$log_file_subfolder$timestamp""unraid-vmbackup.log" && errors="1"
										if [ "$send_notifications" -eq 1 ]; then
											/usr/local/emhttp/plugins/dynamix/scripts/notify -e "unraid-vmbackup_vm_backup" -s "unRAID VM Backup script" -d "$vm vdisk second compare failed" -i "alert" -m "$(date '+%Y-%m-%d %H:%M') failure: vdisk backup file failed second comparison."
										fi
									else
										echo "$(date '+%Y-%m-%d %H:%M') information: $vm vdisk backup file passed second comparison. moving on." | tee -a "$backup_location/$log_file_subfolder$timestamp""unraid-vmbackup.log"
									fi
								else
									echo "$(date '+%Y-%m-%d %H:%M') information: $vm vdisk backup file matches source file. moving on." | tee -a "$backup_location/$log_file_subfolder$timestamp""unraid-vmbackup.log"
								fi
							fi
						else
							# check to see if an existing backup was already copied. if so, use rsync. if not, use cp.
							if [ ! -f "$backup_location/$vm/$timestamp$new_disk" ]; then
								# check to see if rsync_only.
								if [ "$rsync_only" -eq 1 ]; then
									rsync -av$rsync_dry_run_option --sparse "$disk" "$backup_location/$vm/$timestamp$new_disk"
									# get rsync result and send notification
									if [[ $? -eq 1 ]]; then
										if [ "$send_notifications" -eq 1 ]; then
											/usr/local/emhttp/plugins/dynamix/scripts/notify -e "unraid-vmbackup_vm_backup" -s "unRAID VM Backup script" -d "$vm vdisk backup failed" -i "alert" -m "$(date '+%Y-%m-%d %H:%M') failure: copy of backup of $disk to $backup_location/$vm/$timestamp$new_disk failed."
										fi
									fi
								else
									cp -av --sparse=always "$disk" "$backup_location/$vm/$timestamp$new_disk"
									# get cp result and send notification
									if [[ $? -eq 1 ]]; then
										if [ "$send_notifications" -eq 1 ]; then
										
											/usr/local/emhttp/plugins/dynamix/scripts/notify -e "unraid-vmbackup_vm_backup" -s "unRAID VM Backup script" -d "copy $vm backup failed" -i "alert" -m "$(date '+%Y-%m-%d %H:%M') failure: copy of backup of $disk vdisk to $backup_location/$vm/$timestamp$new_disk failed."
										fi
									fi
								fi
								# make sure copy has current date/time for modified attribute so that removing old disks by date will work.
								touch -d "now" "$backup_location/$vm/$timestamp$new_disk"
							else
								# use rsync because delta_sync was enabled.
								rsync -av$rsync_dry_run_option --inplace --no-whole-file "$disk" "$backup_location/$vm/$timestamp$new_disk"
								# get rsync result and send notification
								if [[ $? -eq 1 ]]; then
									if [ "$send_notifications" -eq 1 ]; then
										/usr/local/emhttp/plugins/dynamix/scripts/notify -e "unraid-vmbackup_vm_backup" -s "unRAID VM Backup script" -d "$vm vdisk backup failed" -i "alert" -m "$(date '+%Y-%m-%d %H:%M') failure: copy of backup of $disk to $backup_location/$vm/$timestamp$new_disk failed."
									fi
								fi
								# make sure copy has current date/time for modified attribute so that removing old disks by date will work.
								touch -d "now" "$backup_location/$vm/$timestamp$new_disk"
							fi
							# check to see if compare_files is enabled. if yes, check for vdisk differences.
							if [ "$compare_files" -eq 1 ]; then
								if ! cmp -s "$disk" "$backup_location/$vm/$timestamp$new_disk"; then
									echo "$(date '+%Y-%m-%d %H:%M') warning: $vm vdisk backup file is different than source file. attempting slower rsync backup." | tee -a "$backup_location/$log_file_subfolder$timestamp""unraid-vmbackup.log" && errors="1"
									if [ "$send_notifications" -eq 1 ]; then
										/usr/local/emhttp/plugins/dynamix/scripts/notify -e "unraid-vmbackup_vm_backup" -s "unRAID VM Backup script" -d "$vm vdisk compare failed" -i "warning" -m "$(date '+%Y-%m-%d %H:%M') warning: vdisk backup file is different than source file. attempting slower rsync backup."
									fi
									rsync -av$rsync_dry_run_option --sparse "$disk" "$backup_location/$vm/$timestamp$new_disk"
									# get rsync result and send notification
									if [[ $? -eq 1 ]]; then
										if [ "$send_notifications" -eq 1 ]; then
											/usr/local/emhttp/plugins/dynamix/scripts/notify -e "unraid-vmbackup_vm_backup" -s "unRAID VM Backup script" -d "$vm vdisk backup failed" -i "alert" -m "$(date '+%Y-%m-%d %H:%M') failure: copy of backup of $disk to $backup_location/$vm/$timestamp$new_disk failed."
										fi
									fi
									# make sure copy has current date/time for modified attribute so that removing old disks by date will work.
									touch -d "now" "$backup_location/$vm/$timestamp$new_disk"
									if ! cmp -s "$disk" "$backup_location/$vm/$timestamp$new_disk"; then
										echo "$(date '+%Y-%m-%d %H:%M') failure: $vm vdisk backup file failed second comparison." | tee -a "$backup_location/$log_file_subfolder$timestamp""unraid-vmbackup.log" && errors="1"
										if [ "$send_notifications" -eq 1 ]; then
											/usr/local/emhttp/plugins/dynamix/scripts/notify -e "unraid-vmbackup_vm_backup" -s "unRAID VM Backup script" -d "$vm vdisk second compare failed" -i "alert" -m "$(date '+%Y-%m-%d %H:%M') failure: vdisk backup file failed second comparison."
										fi
									else
										echo "$(date '+%Y-%m-%d %H:%M') information: $vm vdisk backup file passed second comparison. moving on." | tee -a "$backup_location/$log_file_subfolder$timestamp""unraid-vmbackup.log"
									fi
								else
									echo "$(date '+%Y-%m-%d %H:%M') information: $vm vdisk backup file matches source file. moving on." | tee -a "$backup_location/$log_file_subfolder$timestamp""unraid-vmbackup.log"
								fi
							fi
						fi
						# send a message to the user based on whether there was an actual copy or a dry-run.
						if [ "$actually_copy_files" -eq 0 ]; then
							echo "$(date '+%Y-%m-%d %H:%M') information: dry-run backup of $new_disk vdisk to $backup_location/$vm/$timestamp$new_disk complete." | tee -a "$backup_location/$log_file_subfolder$timestamp""unraid-vmbackup.log"
						else
							echo "$(date '+%Y-%m-%d %H:%M') information: backup of $new_disk vdisk to $backup_location/$vm/$timestamp$new_disk complete." | tee -a "$backup_location/$log_file_subfolder$timestamp""unraid-vmbackup.log"
						fi
### Added: If statement to check if snapshot is created. if this is the case we need to merge the snapshot back into the original vdisk and cleanup the snapshot
						if [ "$vm_state" == "running" ] && [ "$enable_backup_running_vm" -eq 1 ]; then
						echo "Syncing changes in snapshot back into our vdisk and set base vdisk from .snap.img to .vdisk.img and delete .snap.img"
                                                virsh blockcommit $vm $disknumber --active --wait --verbose --pivot
						echo "sleeping for 5 seconds after merging snapshot to vdisk before deleting snapshot"
						sleep 5
						#echo "Removing snapshot snap.img"
						#virsh snapshot-delete $vm --metadata snap.img ()
						echo "checking if snapshot still exists, if so we delete the MF"
                                                if [ $diskPath.snap.img ]
						then
						rm -f $diskPath.snap.img
						fi
						else
						echo "$(date '+%Y-%m-%d %H:%M') $vm is not running, do not exec virsh blockcommit"
						fi
					fi	
				fi
			done
		fi
		# check to see if set_vm_to_original_state is 1 and then check the vm's original state.
		if [ "$set_vm_to_original_state" -eq 1 ]; then
			# start the vm after backup based on previous state.
			if [ "$vm_original_state" == "running" ]; then
				echo "$(date '+%Y-%m-%d %H:%M') action: vm_original_state is $vm_original_state. starting $vm." | tee -a "$backup_location/$log_file_subfolder$timestamp""unraid-vmbackup.log"
				if [ "$detailed_notifications" -eq 1 ]; then
					
					if [ "$send_notifications" -eq 1 ] && [ "$only_send_error_notifications" -eq 0 ]; then
						/usr/local/emhttp/plugins/dynamix/scripts/notify -e "unraid-vmbackup_vm_backup" -s "unRAID VM Backup script" -d "script re-starting $vm" -i "normal" -m "$(date '+%Y-%m-%d %H:%M') action: vm_original_state is $vm_original_state. starting $vm."
					fi
				fi
### edited: if statement to check if enable_backup_running_vm is enabled or not. if it is echo. if not start the vm
				# start vm
				if [ "$enable_backup_running_vm" -ne 1 ]; then
				virsh start "$vm"
				else
				echo "$vm is running and enable_backup_running_vm = $enable_backup_running_vm"
				fi
			else
				echo "$(date '+%Y-%m-%d %H:%M') information: vm_original_state is $vm_original_state. not starting $vm." | tee -a "$backup_location/$log_file_subfolder$timestamp""unraid-vmbackup.log"
				if [ "$detailed_notifications" -eq 1 ]; then
				
					if [ "$send_notifications" -eq 1 ] && [ "$only_send_error_notifications" -eq 0 ]; then
						/usr/local/emhttp/plugins/dynamix/scripts/notify -e "unraid-vmbackup_vm_backup" -s "unRAID VM Backup script" -d "script not starting $vm" -i "normal" -m "$(date '+%Y-%m-%d %H:%M') information: vm_original_state is $vm_original_state. not starting $vm."
					fi
				fi
			fi
		fi
		# if start_vm_after_backup is set to 1 then start the vm but dont check that it has been successful.
		if [ "$start_vm_after_backup" -eq 1 ]; then
			echo "$(date '+%Y-%m-%d %H:%M') action: start_vm_after_backup is $start_vm_after_backup. starting $vm." | tee -a "$backup_location/$log_file_subfolder$timestamp""unraid-vmbackup.log"
			if [ "$detailed_notifications" -eq 1 ]; then
				
				if [ "$send_notifications" -eq 1 ] && [ "$only_send_error_notifications" -eq 0 ]; then
					/usr/local/emhttp/plugins/dynamix/scripts/notify -e "unraid-vmbackup_vm_backup" -s "unRAID VM Backup script" -d "script re-starting $vm" -i "normal" -m "$(date '+%Y-%m-%d %H:%M') action: start_vm_after_backup is $start_vm_after_backup. starting $vm."
				fi
			fi
### edited: if statement to check if enable_backup_running_vm is enabled or not. if it is echo. if not start the vm
			# try and start the vm.
			if [ "$enable_backup_running_vm" -ne 1 ]; then
			virsh start "$vm"
			else
			echo "$vm is running and enable_backup_running_vm = $enable_backup_running_vm"
			fi
		fi
		# check to see if backup files should be compressed.
		if [ "$compress_backups" -eq 1 ]; then
			# check if only one non-timestamped backup is being kept. if so, perform compression without a timestamp. if not, continue as normal.
			if [ "$timestamp_files" -eq 0 ]  && [ "$number_of_backups_to_keep" -eq 1 ]; then
				# make sure new image files exist before removing existing tarball
				if [[ -n $(find "$backup_location/$vm/" -type f \( -name "*.img" -or -name "*.qcow2" \) ) ]] && [[ -n $(find "$backup_location/$vm" -type f \( -name "*.xml" \) ) ]]; then
					echo "$(date '+%Y-%m-%d %H:%M') information: found new image files. removing existing tarball." | tee -a "$backup_location/$log_file_subfolder$timestamp""unraid-vmbackup.log"
					# remove existing tarball
					rm -fv "$backup_location/$vm/"*.tar.gz | tee -a "$backup_location/$log_file_subfolder$timestamp""unraid-vmbackup.log"
					# create new compressed tarball with latest backup.
					
					echo "$(date '+%Y-%m-%d %H:%M') information: started creating new tarball." | tee -a "$backup_location/$log_file_subfolder$timestamp""unraid-vmbackup.log"
					cd "$backup_location/$vm/" && tar zcvSf "$backup_location/$vm/$vm.tar.gz" -C "$backup_location/$vm/" -- *.{xml,fd,img,qcow2}
					echo "$(date '+%Y-%m-%d %H:%M') information: finished creating new tarball." | tee -a "$backup_location/$log_file_subfolder$timestamp""unraid-vmbackup.log"
					
					# remove xml, nvram, and image files.
					find "$backup_location/$vm/" -type f \( -name "*.xml" -or -name "*.fd" -or -name "*.img" -or -name "*.qcow2" \) -exec rm -fv {} \;
					echo "$(date '+%Y-%m-%d %H:%M') information: removing xml, nvram, and image files after tarball." | tee -a "$backup_location/$log_file_subfolder$timestamp""unraid-vmbackup.log"
				else
					echo "$(date '+%Y-%m-%d %H:%M') warning: could not find new image and/or xml files. backup may have failed. not removing existing tarball." | tee -a "$backup_location/$log_file_subfolder$timestamp""unraid-vmbackup.log" && errors="1"
					if [ "$send_notifications" -eq 1 ]; then
						/usr/local/emhttp/plugins/dynamix/scripts/notify -e "unraid-vmbackup_vm_backup" -s "unRAID VM Backup script" -d "no new image files for $vm" -i "warning" -m "$(date '+%Y-%m-%d %H:%M') warning: could not find new image and/or xml files. backup may have failed. not removing existing tarball."
					fi
				fi
			else
				# create compressed tarball with ALL xml, nvram, and image files.
				echo "$(date '+%Y-%m-%d %H:%M') information: started creating new tarball." | tee -a "$backup_location/$log_file_subfolder$timestamp""unraid-vmbackup.log"
				cd "$backup_location/$vm/" && tar zcvSf "$backup_location/$vm/$timestamp$vm.tar.gz" -- *.{xml,fd,img,qcow2}
				echo "$(date '+%Y-%m-%d %H:%M') information: finished creating new tarball." | tee -a "$backup_location/$log_file_subfolder$timestamp""unraid-vmbackup.log"
				
				# remove xml, nvram, and image files.
				find "$backup_location/$vm/" -type f \( -name "*.xml" -or -name "*.fd" -or -name "*.img" -or -name "*.qcow2" \) -exec rm -fv {} \;
				echo "$(date '+%Y-%m-%d %H:%M') information: removing xml, nvram, and image files after tarball." | tee -a "$backup_location/$log_file_subfolder$timestamp""unraid-vmbackup.log"
			fi
		fi
	else
		# start the vm based on previous state.
		if [ "$vm_original_state" == "running" ]; then
			echo "$(date '+%Y-%m-%d %H:%M') action: vm_original_state is $vm_original_state. starting $vm." | tee -a "$backup_location/$log_file_subfolder$timestamp""unraid-vmbackup.log"
			if [ "$detailed_notifications" -eq 1 ]; then
				
				if [ "$send_notifications" -eq 1 ] && [ "$only_send_error_notifications" -eq 0 ]; then
					/usr/local/emhttp/plugins/dynamix/scripts/notify -e "unraid-vmbackup_vm_backup" -s "unRAID VM Backup script" -d "script re-starting $vm" -i "normal" -m "$(date '+%Y-%m-%d %H:%M') action: vm_original_state is $vm_original_state. starting $vm."
				fi
			fi
### edited: if statement to check if enable_backup_running_vm is enabled or not. if it is echo. if not start the vm
			# start vm
			if [ "$enable_backup_running_vm" -ne 1 ]; then
			virsh start "$vm"
			else
			echo "$vm is running and enable_backup_running_vm = $enable_backup_running_vm"
			fi
		else
			echo "$(date '+%Y-%m-%d %H:%M') information: vm_original_state is $vm_original_state. not starting $vm." | tee -a "$backup_location/$log_file_subfolder$timestamp""unraid-vmbackup.log"
			if [ "$detailed_notifications" -eq 1 ]; then
				
				if [ "$send_notifications" -eq 1 ] && [ "$only_send_error_notifications" -eq 0 ]; then
					/usr/local/emhttp/plugins/dynamix/scripts/notify -e "unraid-vmbackup_vm_backup" -s "unRAID VM Backup script" -d "script not starting $vm" -i "normal" -m "$(date '+%Y-%m-%d %H:%M') information: vm_original_state is $vm_original_state. not starting $vm."
				fi
			fi
		fi
		# for whatever reason the backup attempt failed.
		echo "$(date '+%Y-%m-%d %H:%M') failure: backup of $vm to $backup_location/$vm failed." | tee -a "$backup_location/$log_file_subfolder$timestamp""unraid-vmbackup.log" && errors="1"
		if [ "$send_notifications" -eq 1 ];then
			/usr/local/emhttp/plugins/dynamix/scripts/notify -e "unraid-vmbackup_failure" -s "unRAID VM Backup script" -d "backup of $vm failed" -i "alert" -m "$(date '+%Y-%m-%d %H:%M') failure: backup of $vm to $backup_location/$vm failed."
		fi
		# if start_vm_after_failure is set to 1 then start the vm but dont check that it has been successful.
		if [ "$start_vm_after_failure" -eq 1 ]; then
			echo "$(date '+%Y-%m-%d %H:%M') action: start_vm_after_failure is $start_vm_after_failure starting $vm." | tee -a "$backup_location/$log_file_subfolder$timestamp""unraid-vmbackup.log"
			if [ "$detailed_notifications" -eq 1 ]; then
				
				if [ "$send_notifications" -eq 1 ] && [ "$only_send_error_notifications" -eq 0 ]; then
					/usr/local/emhttp/plugins/dynamix/scripts/notify -e "unraid-vmbackup_vm_backup" -s "unRAID VM Backup script" -d "script re-starting $vm" -i "normal" -m "$(date '+%Y-%m-%d %H:%M') action: start_vm_after_failure is $start_vm_after_failure starting $vm."
				fi
			fi
### edited: if statement to check if enable_backup_running_vm is enabled or not. if it is echo. if not start the vm
			# try and start the vm.
			if [ "$enable_backup_running_vm" -ne 1 ]; then
			virsh start "$vm"
			else
			echo "$vm is running and enable_backup_running_vm = $enable_backup_running_vm"
			fi
		fi
	fi
	echo "$(date '+%Y-%m-%d %H:%M') information: backup of $vm to $backup_location/$vm completed." | tee -a "$backup_location/$log_file_subfolder$timestamp""unraid-vmbackup.log"
	if [ "$detailed_notifications" -eq 1 ]; then
				
		if [ "$send_notifications" -eq 1 ] && [ "$only_send_error_notifications" -eq 0 ]; then
			/usr/local/emhttp/plugins/dynamix/scripts/notify -e "unraid-vmbackup_vm_backup" -s "unRAID VM Backup script" -d "script completed $vm backup" -i "normal" -m "$(date '+%Y-%m-%d %H:%M') information: backup of $vm to $backup_location/$vm completed."
		fi
	fi
	# check to see how many days backups should be kept.
	if [ "$number_of_days_to_keep_backups" -eq 0 ]; then
	
		echo "$(date '+%Y-%m-%d %H:%M') information: number of days to keep backups set to indefinitely." | tee -a "$backup_location/$log_file_subfolder$timestamp""unraid-vmbackup.log"
	else
		echo "$(date '+%Y-%m-%d %H:%M') information: cleaning out backups older than $number_of_days_to_keep_backups days in location ONLY if newer files exist in $backup_location/$vm/" | tee -a "$backup_location/$log_file_subfolder$timestamp""unraid-vmbackup.log"
		if [ "$detailed_notifications" -eq 1 ] && [ "$send_notifications" -eq 1 ] && [ "$only_send_error_notifications" -eq 0 ]; then
			/usr/local/emhttp/plugins/dynamix/scripts/notify -e "unraid-vmbackup_remove_old_backups" -s "unRAID VM Backup script" -d "script removing old backups" -i "normal" -m "$(date '+%Y-%m-%d %H:%M') information: cleaning out backups older than $number_of_days_to_keep_backups days in location ONLY if newer files exist in $backup_location/$vm/"
		fi
		# create variable equal to number_of_days_to_keep_backups plus one to make sure that there are files younger than the cutoff date.
		days_plus_1=$((number_of_days_to_keep_backups + 1))
		for j in $backup_location/$vm/
		do
			# remove old xml files.
			if [[ -n $(find "$j" -type f \( -name "*.xml" \) -mmin -$((days_plus_1*24*60))) ]]; then
				if [ "$detailed_notifications" -eq 1 ] && [ "$send_notifications" -eq 1 ] && [ "$only_send_error_notifications" -eq 0 ]; then
					deleted_files=$(find "$j" -type f \( -name "*.xml" \) -mmin +$((number_of_days_to_keep_backups*24*60)) -exec rm -fv {} \;)
					echo "$(date '+%Y-%m-%d %H:%M') information: $deleted_files" | tee -a "$backup_location/$log_file_subfolder$timestamp""unraid-vmbackup.log"
					/usr/local/emhttp/plugins/dynamix/scripts/notify -e "unraid-vmbackup_remove_xmls" -s "unRAID VM Backup script" -d "script removing xmls" -i "normal" -m "$(date '+%Y-%m-%d %H:%M') information: $deleted_files"
				else
					find "$j" -type f \( -name "*.xml" \) -mmin +$((number_of_days_to_keep_backups*24*60)) -exec rm -fv {} \;
				fi
			fi
			# remove old nvram files.
			if [[ -n $(find "$j" -type f \( -name "*.fd" \) -mmin -$((days_plus_1*24*60))) ]]; then
				if [ "$detailed_notifications" -eq 1 ] && [ "$send_notifications" -eq 1 ] && [ "$only_send_error_notifications" -eq 0 ]; then
					deleted_files=$(find "$j" -type f \( -name "*.fd" \) -mmin +$((number_of_days_to_keep_backups*24*60)) -exec rm -fv {} \;)
					echo "$(date '+%Y-%m-%d %H:%M') information: $deleted_files" | tee -a "$backup_location/$log_file_subfolder$timestamp""unraid-vmbackup.log"
					/usr/local/emhttp/plugins/dynamix/scripts/notify -e "unraid-vmbackup_remove_nvrams" -s "unRAID VM Backup script" -d "script removing nvrams" -i "normal" -m "$(date '+%Y-%m-%d %H:%M') information: $deleted_files"
				else
					find "$j" -type f \( -name "*.fd" \) -mmin +$((number_of_days_to_keep_backups*24*60)) -exec rm -fv {} \;
				fi
			fi
			# remove old vdisk files.
			if [[ -n $(find "$j" -type f \( -name "*.img" -or -name "*.qcow2" \) -mmin -$((days_plus_1*24*60))) ]]; then
				if [ "$detailed_notifications" -eq 1 ] && [ "$send_notifications" -eq 1 ] && [ "$only_send_error_notifications" -eq 0 ]; then
					deleted_files=$(find "$j" -type f \( -name "*.img" -or -name "*.qcow2" \) -mmin +$((number_of_days_to_keep_backups*24*60)) -exec rm -fv {} \;)
					echo "$(date '+%Y-%m-%d %H:%M') information: $deleted_files" | tee -a "$backup_location/$log_file_subfolder$timestamp""unraid-vmbackup.log"
					/usr/local/emhttp/plugins/dynamix/scripts/notify -e "unraid-vmbackup_remove_vdisks" -s "unRAID VM Backup script" -d "script removing vdisks" -i "normal" -m "$(date '+%Y-%m-%d %H:%M') information: $deleted_files"
				else
				
					find "$j" -type f \( -name "*.img" -or -name "*.qcow2" \) -mmin +$((number_of_days_to_keep_backups*24*60)) -exec rm -fv {} \;
				
				fi
			fi
			# remove old tarballs.
			if [[ -n $(find "$j" -type f \( -name "*.tar.gz" \) -mmin -$((days_plus_1*24*60))) ]]; then
				
				if [ "$detailed_notifications" -eq 1 ] && [ "$send_notifications" -eq 1 ] && [ "$only_send_error_notifications" -eq 0 ]; then
					deleted_files=$(find "$j" -type f \( -name "*.tar.gz" \) -mmin +$((number_of_days_to_keep_backups*24*60)) -exec rm -fv {} \;)
					echo "$(date '+%Y-%m-%d %H:%M') information: $deleted_files" | tee -a "$backup_location/$log_file_subfolder$timestamp""unraid-vmbackup.log"
					/usr/local/emhttp/plugins/dynamix/scripts/notify -e "unraid-vmbackup_remove_tarballs" -s "unRAID VM Backup script" -d "script removing tarballs" -i "normal" -m "$(date '+%Y-%m-%d %H:%M') information: $deleted_files"
				else
					find "$j" -type f \( -name "*.tar.gz" \) -mmin +$((number_of_days_to_keep_backups*24*60)) -exec rm -fv {} \;
				fi
			fi
		done
	fi
	# check to see how many backups should be kept.
	if [ "$number_of_backups_to_keep" -eq 0 ]; then
	
		echo "$(date '+%Y-%m-%d %H:%M') information: number of backups to keep set to infinite." | tee -a "$backup_location/$log_file_subfolder$timestamp""unraid-vmbackup.log"
	else
		echo "$(date '+%Y-%m-%d %H:%M') information: cleaning out backups over $number_of_backups_to_keep in location $backup_location/$vm/" | tee -a "$backup_location/$log_file_subfolder$timestamp""unraid-vmbackup.log"
		if [ "$detailed_notifications" -eq 1 ] && [ "$send_notifications" -eq 1 ] && [ "$only_send_error_notifications" -eq 0 ]; then
			/usr/local/emhttp/plugins/dynamix/scripts/notify -e "unraid-vmbackup_remove_old_backups" -s "unRAID VM Backup script" -d "script removing old backups" -i "normal" -m "$(date '+%Y-%m-%d %H:%M') information: cleaning out backups over $number_of_backups_to_keep in location $backup_location/$vm/"
		
		fi
		# create variable equal to number_of_backups_to_keep plus one to make sure that the correct number of files are kept.
		backups_plus_1=$((number_of_backups_to_keep + 1))
		
		# remove xml files that are over the limit.
		if [ "$detailed_notifications" -eq 1 ] && [ "$send_notifications" -eq 1 ] && [ "$only_send_error_notifications" -eq 0 ]; then
			deleted_files=$(find "$backup_location/$vm/"*.xml -type f -printf '%T@\t%p\n' | sort -t $'\t' -gr | tail -n +$backups_plus_1 | cut -d $'\t' -f 2- | xargs -d '\n' -r rm -fv --)
			if [[ -n "$deleted_files" ]]; then
			
				echo "$(date '+%Y-%m-%d %H:%M') information: $deleted_files" | tee -a "$backup_location/$log_file_subfolder$timestamp""unraid-vmbackup.log"
				/usr/local/emhttp/plugins/dynamix/scripts/notify -e "unraid-vmbackup_remove_xmls" -s "unRAID VM Backup script" -d "script removing xmls" -i "normal" -m "$(date '+%Y-%m-%d %H:%M') information: $deleted_files"
			fi
		else
			deleted_files=$(find "$backup_location/$vm/"*.xml -type f -printf '%T@\t%p\n' | sort -t $'\t' -gr | tail -n +$backups_plus_1 | cut -d $'\t' -f 2- | xargs -d '\n' -r rm -fv --)
			if [[ -n "$deleted_files" ]]; then
			
				echo "$(date '+%Y-%m-%d %H:%M') information: $deleted_files" | tee -a "$backup_location/$log_file_subfolder$timestamp""unraid-vmbackup.log"
			fi
		fi
		# remove nvram files that are over the limit.
		if [ "$detailed_notifications" -eq 1 ] && [ "$send_notifications" -eq 1 ] && [ "$only_send_error_notifications" -eq 0 ]; then
			deleted_files=$(find "$backup_location/$vm/"*.fd -type f -printf '%T@\t%p\n' | sort -t $'\t' -gr | tail -n +$backups_plus_1 | cut -d $'\t' -f 2- | xargs -d '\n' -r rm -fv --)
			if [[ -n "$deleted_files" ]]; then
			
				echo "$(date '+%Y-%m-%d %H:%M') information: $deleted_files" | tee -a "$backup_location/$log_file_subfolder$timestamp""unraid-vmbackup.log"
				/usr/local/emhttp/plugins/dynamix/scripts/notify -e "unraid-vmbackup_remove_nvrams" -s "unRAID VM Backup script" -d "script removing nvrams" -i "normal" -m "$(date '+%Y-%m-%d %H:%M') information: $deleted_files"
			fi
		else
			deleted_files=$(find "$backup_location/$vm/"*.fd -type f -printf '%T@\t%p\n' | sort -t $'\t' -gr | tail -n +$backups_plus_1 | cut -d $'\t' -f 2- | xargs -d '\n' -r rm -fv --)
			if [[ -n "$deleted_files" ]]; then
			
				echo "$(date '+%Y-%m-%d %H:%M') information: $deleted_files" | tee -a "$backup_location/$log_file_subfolder$timestamp""unraid-vmbackup.log"
			fi
		
		fi
		# remove image files that are over the limit.
		# get number of vdisks
		numberofvdisks="1"
		vdisknumberextregex="[0-9]+\\.(img|qcow2)"
		vdisknumberonlyregex="[0-9]+"
		for imagefilename in "$backup_location/$vm/"*.{img,qcow2}
		do
			# get highest number from vdisk count
			if [[ $imagefilename =~ $vdisknumberextregex ]]; then
				imagefilenamenumberext=${BASH_REMATCH[0]}
				
				if [[ $imagefilenamenumberext =~ $vdisknumberonlyregex ]]; then
					vdisk_numberonly=${BASH_REMATCH[0]}
				fi
			fi
			if [ "$numberofvdisks" -lt "$vdisk_numberonly" ]; then
				numberofvdisks="$vdisk_numberonly"
			fi
		done
		# create variable equal to number_of_backups_to_keep, times the number of vdisks, plus one; to make sure that the correct number of files are kept.
		vdiskbackups_plus_1=$(((number_of_backups_to_keep * numberofvdisks) + 1))
		if [ "$detailed_notifications" -eq 1 ] && [ "$send_notifications" -eq 1 ] && [ "$only_send_error_notifications" -eq 0 ]; then
			deleted_files=$(find "$backup_location/$vm/"*.{img,qcow2} -type f -printf '%T@\t%p\n' | sort -t $'\t' -gr | tail -n +$vdiskbackups_plus_1 | cut -d $'\t' -f 2- | xargs -d '\n' -r rm -fv --)
			if [[ -n "$deleted_files" ]]; then
			
				echo "$(date '+%Y-%m-%d %H:%M') information: $deleted_files" | tee -a "$backup_location/$log_file_subfolder$timestamp""unraid-vmbackup.log"
				/usr/local/emhttp/plugins/dynamix/scripts/notify -e "unraid-vmbackup_remove_vdisks" -s "unRAID VM Backup script" -d "script removing vdisks" -i "normal" -m "$(date '+%Y-%m-%d %H:%M') information: $deleted_files"
			fi
		else
			deleted_files=$(find "$backup_location/$vm/"*.{img,qcow2} -type f -printf '%T@\t%p\n' | sort -t $'\t' -gr | tail -n +$vdiskbackups_plus_1 | cut -d $'\t' -f 2- | xargs -d '\n' -r rm -fv --)
			if [[ -n "$deleted_files" ]]; then
			
				echo "$(date '+%Y-%m-%d %H:%M') information: $deleted_files" | tee -a "$backup_location/$log_file_subfolder$timestamp""unraid-vmbackup.log"
			fi
		fi
		# remove tar.gz files that are over the limit.
		if [ "$detailed_notifications" -eq 1 ] && [ "$send_notifications" -eq 1 ] && [ "$only_send_error_notifications" -eq 0 ]; then
			deleted_files=$(find "$backup_location/$vm/"*.tar.gz -type f -printf '%T@\t%p\n' | sort -t $'\t' -gr | tail -n +$backups_plus_1 | cut -d $'\t' -f 2- | xargs -d '\n' -r rm -fv --)
			if [[ -n "$deleted_files" ]]; then
			
				echo "$(date '+%Y-%m-%d %H:%M') information: $deleted_files" | tee -a "$backup_location/$log_file_subfolder$timestamp""unraid-vmbackup.log"
				/usr/local/emhttp/plugins/dynamix/scripts/notify -e "unraid-vmbackup_remove_tarballs" -s "unRAID VM Backup script" -d "script removing tarballs" -i "normal" -m "$(date '+%Y-%m-%d %H:%M') information: $deleted_files"
			fi
		else
			deleted_files=$(find "$backup_location/$vm/"*.tar.gz -type f -printf '%T@\t%p\n' | sort -t $'\t' -gr | tail -n +$backups_plus_1 | cut -d $'\t' -f 2- | xargs -d '\n' -r rm -fv --)
			if [[ -n "$deleted_files" ]]; then
			
				echo "$(date '+%Y-%m-%d %H:%M') information: $deleted_files" | tee -a "$backup_location/$log_file_subfolder$timestamp""unraid-vmbackup.log"
			fi
		fi
	fi
done
echo "$(date '+%Y-%m-%d %H:%M') information: finished attempt to backup $vms_to_backup to $backup_location." | tee -a "$backup_location/$log_file_subfolder$timestamp""unraid-vmbackup.log"
# check to see if reconstruct write was enabled by this script. if so, disable and continue.
if [ "$enable_reconstruct_write" -eq 1 ]; then
	/usr/local/sbin/mdcmd set md_write_method 0
	echo "$(date '+%Y-%m-%d %H:%M') information: Reconstruct write disabled." | tee -a "$backup_location/$log_file_subfolder$timestamp""unraid-vmbackup.log"
fi
# check to see if log file should be kept.
if [ "$keep_log_file" -eq 1 ]; then
	if [ "$number_of_log_files_to_keep" -eq 0 ]; then
	
		echo "$(date '+%Y-%m-%d %H:%M') information: number of logs to keep set to infinite." | tee -a "$backup_location/$log_file_subfolder$timestamp""unraid-vmbackup.log"
	else
		echo "$(date '+%Y-%m-%d %H:%M') information: cleaning out logs over $number_of_log_files_to_keep." | tee -a "$backup_location/$log_file_subfolder$timestamp""unraid-vmbackup.log"
		# create variable equal to number_of_log_files_to_keep plus one to make sure that the correct number of files are kept.
		log_files_plus_1=$((number_of_log_files_to_keep + 1))
		# remove log files that are over the limit.
		if [ "$detailed_notifications" -eq 1 ] && [ "$send_notifications" -eq 1 ] && [ "$only_send_error_notifications" -eq 0 ]; then
			deleted_files=$(find "$backup_location/$log_file_subfolder"*unraid-vmbackup.log -type f -printf '%T@\t%p\n' | sort -t $'\t' -gr | tail -n +$log_files_plus_1 | cut -d $'\t' -f 2- | xargs -d '\n' -r rm -fv --)
			if [[ -n "$deleted_files" ]]; then
				echo "$(date '+%Y-%m-%d %H:%M') information: $deleted_files" | tee -a "$backup_location/$log_file_subfolder$timestamp""unraid-vmbackup.log"
				/usr/local/emhttp/plugins/dynamix/scripts/notify -e "unraid-vmbackup_remove_logs" -s "unRAID VM Backup script" -d "script removing logs" -i "normal" -m "$(date '+%Y-%m-%d %H:%M') information: $deleted_files"
			fi
		else
			deleted_files=$(find "$backup_location/$log_file_subfolder"*unraid-vmbackup.log -type f -printf '%T@\t%p\n' | sort -t $'\t' -gr | tail -n +$log_files_plus_1 | cut -d $'\t' -f 2- | xargs -d '\n' -r rm -fv --)
			if [[ -n "$deleted_files" ]]; then
				echo "$(date '+%Y-%m-%d %H:%M') information: $deleted_files" | tee -a "$backup_location/$log_file_subfolder$timestamp""unraid-vmbackup.log"
			fi
		fi
	fi
fi
# check to see if error log file should be kept.
if [ "$keep_error_log_file" -eq 1 ]; then
	if [ "$number_of_error_log_files_to_keep" -eq 0 ]; then
	
		echo "$(date '+%Y-%m-%d %H:%M') information: number of error logs to keep set to infinite." | tee -a "$backup_location/$log_file_subfolder$timestamp""unraid-vmbackup.log"
	else
		echo "$(date '+%Y-%m-%d %H:%M') information: cleaning out error logs over $number_of_error_log_files_to_keep." | tee -a "$backup_location/$log_file_subfolder$timestamp""unraid-vmbackup.log"
		# create variable equal to number_of_error_log_files_to_keep plus one to make sure that the correct number of files are kept.
		error_log_files_plus_1=$((number_of_error_log_files_to_keep + 1))
		# remove error log files that are over the limit.
		if [ "$detailed_notifications" -eq 1 ] && [ "$send_notifications" -eq 1 ] && [ "$only_send_error_notifications" -eq 0 ]; then
			deleted_files=$(find "$backup_location/$log_file_subfolder"*unraid-vmbackup_error.log -type f -printf '%T@\t%p\n' | sort -t $'\t' -gr | tail -n +$error_log_files_plus_1 | cut -d $'\t' -f 2- | xargs -d '\n' -r rm -fv --)
			if [[ -n "$deleted_files" ]]; then
				echo "$(date '+%Y-%m-%d %H:%M') information: $deleted_files" | tee -a "$backup_location/$log_file_subfolder$timestamp""unraid-vmbackup.log"
				/usr/local/emhttp/plugins/dynamix/scripts/notify -e "unraid-vmbackup_remove_error_logs" -s "unRAID VM Backup script" -d "script removing error logs" -i "normal" -m "$(date '+%Y-%m-%d %H:%M') information: $deleted_files"
			fi
		
		else
			deleted_files=$(find "$backup_location/$log_file_subfolder"*unraid-vmbackup_error.log -type f -printf '%T@\t%p\n' | sort -t $'\t' -gr | tail -n +$error_log_files_plus_1 | cut -d $'\t' -f 2- | xargs -d '\n' -r rm -fv --)
			if [[ -n "$deleted_files" ]]; then
				echo "$(date '+%Y-%m-%d %H:%M') information: $deleted_files" | tee -a "$backup_location/$log_file_subfolder$timestamp""unraid-vmbackup.log"
			fi
		fi
	fi
fi
# check to see if there were any errors.
if [ "$errors" -eq 1 ]; then
	echo "$(date '+%Y-%m-%d %H:%M') warning: errors found. creating error log file." | tee -a "$backup_location/$log_file_subfolder$timestamp""unraid-vmbackup.log"
	rsync -av "$backup_location/$log_file_subfolder$timestamp""unraid-vmbackup.log" "$backup_location/$log_file_subfolder$timestamp""unraid-vmbackup_error.log"
	# get rsync result and send notification
	if [[ $? -eq 1 ]]; then
		if [ "$send_notifications" -eq 1 ]; then
			/usr/local/emhttp/plugins/dynamix/scripts/notify -e "unraid-vmbackup_error_log" -s "unRAID VM Backup script" -d "error log create failed" -i "alert" -m "$(date '+%Y-%m-%d %H:%M') failure: $backup_location/$log_file_subfolder$timestamp""unraid-vmbackup_error.log create failed."
		fi
	fi
fi
# check to see if log file should be removed.
if [ "$keep_log_file" -eq 0 ]; then
	if [ "$errors" -eq 1 ] && [ "$keep_error_log_file" -eq 1 ]; then
	
		echo "$(date '+%Y-%m-%d %H:%M') warning: removing log file." | tee -a "$backup_location/$log_file_subfolder$timestamp""unraid-vmbackup_error.log"
		rm -fv "$backup_location/$log_file_subfolder$timestamp""unraid-vmbackup.log"
	else
		echo "$(date '+%Y-%m-%d %H:%M') warning: removing log file."
		rm -fv "$backup_location/$log_file_subfolder$timestamp""unraid-vmbackup.log"
	fi
fi
# check to see if error log file should be removed.
if [ "$keep_error_log_file" -eq 0 ]; then
	if [ "$keep_log_file" -eq 1 ]; then
		echo "$(date '+%Y-%m-%d %H:%M') warning: removing error log file." | tee -a "$backup_location/$log_file_subfolder$timestamp""unraid-vmbackup.log"
		rm -fv "$backup_location/$log_file_subfolder$timestamp""unraid-vmbackup_error.log"
	else
		echo "$(date '+%Y-%m-%d %H:%M') warning: removing error log file."
		rm -fv "$backup_location/$log_file_subfolder$timestamp""unraid-vmbackup_error.log"
	fi
fi
### Logging Stopped ###
if [ "$keep_log_file" -eq 1 ]; then
	echo "$(date '+%Y-%m-%d %H:%M')" " Stop logging to log file."  | tee -a "$backup_location/$log_file_subfolder$timestamp""unraid-vmbackup.log"
fi
if [ "$errors" -eq 1 ] && [ "$keep_error_log_file" -eq 1 ]; then
	echo "$(date '+%Y-%m-%d %H:%M')" " Stop logging to log file."  | tee -a "$backup_location/$log_file_subfolder$timestamp""unraid-vmbackup_error.log"
fi
if [ "$send_notifications" -eq 1 ]; then
	if [ "$errors" -eq 1 ]; then
		/usr/local/emhttp/plugins/dynamix/scripts/notify -e "unraid-vmbackup_error" -s "unRAID VM Backup script" -d "script finished with errors" -i "alert" -m "$(date '+%Y-%m-%d %H:%M') warning: unRAID VM Backup script finished with errors. See log files in $backup_location/$log_file_subfolder for details."
	elif [ "$only_send_error_notifications" -eq 0 ]; then
		/usr/local/emhttp/plugins/dynamix/scripts/notify -e "unraid-vmbackup_finished" -s "unRAID VM Backup script" -d "script finished" -i "normal" -m "$(date '+%Y-%m-%d %H:%M') information: unRAID VM Backup script finished. See log files in $backup_location/$log_file_subfolder for details."
	fi
fi
exit 0
######################################################### script end ###########################################################
# Originally from unraid-autovmbackup by Daniel Jackson (danioj)
# Includes additions for removing old backups added by Deeks
# Includes additions for creating backup of running vm's by Dikkekop
# for original script go to:
# https://lime-technology.com/forum/index.php?topic=47986
# for Deeks script go to:
# https://lime-technology.com/forums/topic/46281-unraid-autovmbackup-automate-backup-of-virtual-machines-in-unraid-v04/?do=findComment&comment=589821
